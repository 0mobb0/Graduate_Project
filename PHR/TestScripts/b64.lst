     1                              <1> ; reproduce Figure 2 of Half&Half
     2                              <1> 
     3                              <1> ; number of dummy branches
     4                              <1> %ifndef dummybranches
     5                              <1>     %define dummybranches 150
     6                              <1> %endif
     7                              <1> 
     8                              <1> %macro testinit3 0
     9                              <1>     mov rdi, 1000
    10                              <1>     READ_PMC_START
    11                              <1> 
    12                              <1> loop_begin:
    13                              <1> 
    14                              <1>     ; train branch
    15                              <1>     rdrand eax
    16                              <1>     and eax, 1
    17                              <1>     jnz first_target
    18                              <1> first_target:
    19                              <1> 
    20                              <1>     ; dummy branches
    21                              <1>     %assign i 1
    22                              <1>     %rep dummybranches
    23                              <1>     jmp dummy_branch_%+ i
    24                              <1> dummy_branch_%+ i:
    25                              <1>     %assign i i+1
    26                              <1>     %endrep
    27                              <1> 
    28                              <1>     ; test branch
    29                              <1>     test eax, eax
    30                              <1>     jnz second_target
    31                              <1> second_target:
    32                              <1> 
    33                              <1>     dec rdi
    34                              <1>     jnz loop_begin
    35                              <1> 
    36                              <1>     READ_PMC_END
    37                              <1> 
    38                              <1> 
    39                              <1> %endmacro
     1                                  ;----------------------------------------------------------------------------
     2                                  ;                       TemplateB64.nasm                2022-10-28 Agner Fog
     3                                  ;
     4                                  ;                PMC Test program for multiple threads
     5                                  ;                           NASM syntax
     6                                  ;
     7                                  ; This file is a replacement for the file PMCTestB64.nasm where relevant 
     8                                  ; parts are coded as replaceable macros. This is useful for automated test
     9                                  ; scripts where the macro definitions are inserted on the command line or
    10                                  ; as included files.
    11                                  ;
    12                                  ; The following defines and macros can be defined on the command line or in include files:
    13                                  ; 
    14                                  ; instruct:      The name of a single instruction to test (define or macro). Default = nop
    15                                  ;
    16                                  ; instruct2:     Extra line of code following instruction. Default = nothing
    17                                  ;
    18                                  ; regsize:       Register size: 8, 16, 32, 64, 128, 256, 512. Default = 32
    19                                  ;                (Legacy code has regsize=65 indicating mmx register)
    20                                  ;
    21                                  ; regtype:       Register type: r = general purpose register, h = high 8-bit register,
    22                                  ;                v = vector register 128 bits and bigger, mmx = mmx register, k = mask register. 
    23                                  ;                Default is r for regsize <= 64, v for regsize >= 128
    24                                  ;
    25                                  ; numop:         Number of register operands (0 - 3). Default = 0
    26                                  ;
    27                                  ; numimm:        Number of immediate operands (0 - 1). Default = 0
    28                                  ;
    29                                  ; immvalue:      Value of first immediate operand. Default = 0
    30                                  ;
    31                                  ; testcode:      A multi-line macro executing any piece of test code. (Replaces instruction and numop); 
    32                                  ;
    33                                  ; testdata:      Macro defining any static data needed for test. Default = 1000H bytes
    34                                  ; 
    35                                  ; testinit1:     Macro with initializations before all tests. Default sets rsi to point to testdata
    36                                  ;
    37                                  ; testinit2:     Macro with initializations before each test. Default = nothing
    38                                  ;
    39                                  ; testinit3:     Macro with initializations before macro loop. Default = nothing
    40                                  ;
    41                                  ; testinitc:     Macro to call in each test before reading counters
    42                                  ;
    43                                  ; testafter1:    Macro with any cleanup to do after macro loop. Default = nothing
    44                                  ;
    45                                  ; testafter2:    Macro with any cleanup to do after repeat1 loop. Default = nothing
    46                                  ;
    47                                  ; testafter3:    Macro with any cleanup to do after all tests. Default = nothing
    48                                  ;
    49                                  ; repeat0:       Number of repetitions of whole test. Default = 8
    50                                  ;
    51                                  ; repeat1:       Repeat count for loop around testcode. Default = no loop
    52                                  ;
    53                                  ; repeat2:       Repeat count for repeat macro around testcode. Default = 100
    54                                  ;
    55                                  ; noloops:       Define this if repeat1 and repeat2 loops are contained in testcode rather than here
    56                                  ;
    57                                  ; nthreads:      Number of simultaneous threads (default = 1)
    58                                  ; 
    59                                  ; counters:      A comma-separated list of PMC counter numbers (referring to CounterDefinitions in PMCTestA.cpp)
    60                                  ;                Default = include "countertypes.inc"
    61                                  ; 
    62                                  ; WINDOWS:       1 if Windows operating system. Default = 0
    63                                  ;
    64                                  ; USEAVX:        1 if AVX registers used. Default = 1
    65                                  ;
    66                                  ; WARMUPCOUNT:   Set to 10000000 to get CPU into max frequency by executing dummy instructions. Default = 10000
    67                                  ;
    68                                  ; CACHELINESIZE: Size of data cache lines. Default = 64
    69                                  ;
    70                                  ; codealign:     Alignment of test code. Default = 16
    71                                  ; 
    72                                  ; See PMCTestB64.nasm and PMCTest.txt for general instructions.
    73                                  ; 
    74                                  ; (c) 2000-2018 GNU General Public License www.gnu.org/licenses
    75                                  ; 
    76                                  ;-----------------------------------------------------------------------------
    77                                  
    78                                  %include "countertypes.inc"   ; include file defining various parameters
     1                              <1> ; This file is autogenerated. Edit vars.sh and init.sh instead
     2                              <1> 
     3                              <1> ; Operating system:
     4                              <1> %define UNIX 1
     5                              <1> 
     6                              <1> ; CPU:
     7                              <1> %define CPUbrand Intel
     8                              <1> %define ifamily 6
     9                              <1> %define imodel 70
    10                              <1> 
    11                              <1> ; Define whether AVX and YMM registers used
    12                              <1> %define  USEAVX   1
    13                              <1> 
    14                              <1> ; PMC counters:
    15                              <1> %ifndef counters
    16                              <1> %define counters 1,9,104,100,150,220
    17                              <1> %endif
    18                              <1> 
    79                                  
    80                                  ; Define any undefined macros
    81                                  
    82                                  %ifndef repeat1
    83                                     %define repeat1 1
    84                                  %endif
    85                                  
    86                                  %ifndef repeat2
    87                                     %define repeat2 100
    88                                  %endif
    89                                  
    90                                  %ifndef instruct
    91                                     %define instruct  nop  ; default instruction is NOP
    92                                  %endif
    93                                  
    94                                  %ifndef instruct2
    95                                     %define instruct2
    96                                  %endif
    97                                  
    98                                  %ifndef codealign            ; default: align test code by 16
    99                                     %define codealign 16
   100                                  %endif
   101                                  
   102                                  %ifndef numop
   103                                     %define numop  0    ; default number of register operands
   104                                  %endif
   105                                  
   106                                  %ifndef immvalue
   107                                     %define immvalue  0  ; value of immediate operands
   108                                  %endif
   109                                  
   110                                  %ifndef numimm
   111                                     %define numimm  0  ; default number of immediate operands
   112                                  %endif
   113                                  
   114                                  %if numimm == 0
   115                                     %define immoperands0 
   116                                     %define immoperands1
   117                                  %elif numimm == 1
   118                                     %define immoperands0   immvalue
   119                                     %define immoperands1 , immvalue
   120                                  %elif numimm == 2
   121                                     %define immoperands0   immvalue , immvalue
   122                                     %define immoperands1 , immvalue , immvalue
   123                                  %endif
   124                                  
   125                                  %ifnmacro testcode
   126                                     %macro testcode 0   ; default: run instruction 100 times
   127                                        %if numop == 0
   128                                           instruct immoperands0
   129                                        %elif numop == 1
   130                                           instruct reg0 immoperands1
   131                                        %elif numop == 2
   132                                           instruct reg0, reg1 immoperands1
   133                                        %elif numop == 3
   134                                           instruct reg0, reg0, reg1 immoperands1
   135                                        %else
   136                                           %error "unknown numop"
   137                                        %endif
   138                                        instruct2
   139                                     %endmacro
   140                                  %endif
   141                                  
   142                                  ; Operating system: 0 = Linux, 1 = Windows
   143                                  %ifndef WINDOWS
   144                                  %define  WINDOWS  0
   145                                  %endif
   146                                  
   147                                  ; Warmup code. Set to 10000 to get CPU into max frequency. Set to 10000000 for AMD processors with no core clock counter
   148                                  %ifndef WARMUPCOUNT
   149                                  %define WARMUPCOUNT  100000
   150                                  %endif
   151                                  
   152                                  ; Define cache line size (to avoid threads sharing cache lines):
   153                                  %ifndef CACHELINESIZE
   154                                  %define CACHELINESIZE  64
   155                                  %endif
   156                                  
   157                                  ; Define whether AVX and YMM registers used
   158                                  %ifndef  USEAVX
   159                                  %define  USEAVX   1
   160                                  %endif
   161                                  
   162                                  ; Number of repetitions of test.
   163                                  %ifdef   repeat0
   164                                  %define  REPETITIONS0  repeat0
   165                                  %else
   166                                  %define  REPETITIONS0  8
   167                                  %endif
   168                                  
   169                                  %ifdef noloops               ; put loops in testcode rather than here
   170                                  %define REPETITIONS1 1
   171                                  %define REPETITIONS2 1
   172                                  %else
   173                                  %define REPETITIONS1 repeat1
   174                                  %define REPETITIONS2 repeat2
   175                                  %endif
   176                                  
   177                                  %ifndef nthreads
   178                                     %define nthreads  1    ; default number of threads = 1
   179                                  %endif
   180                                  
   181                                  %ifndef counters
   182                                     % define counters 1,9,100,150
   183                                  %endif
   184                                  
   185                                  ; Define registers depending on regtype and regsize
   186                                  %ifndef regtype
   187                                     %ifndef regsize
   188                                        %define regsize 32
   189                                     %endif
   190                                     %if regsize == 9
   191                                        %define regtype h
   192                                     %elif regsize < 65
   193                                        %define regtype r
   194                                     %elif regsize == 65
   195                                        %define regtype mmx
   196                                     %else
   197                                        %define regtype v
   198                                     %endif
   199                                  %endif
   200                                  
   201                                  %ifidni regtype, r
   202                                     %ifndef regsize
   203                                        %define regsize   32      ; default: define registers as 32 bit
   204                                     %endif
   205                                  %elifidni regtype, h
   206                                     %ifndef regsize
   207                                        %define regsize   9       ; high 8-bit register
   208                                     %endif
   209                                  %elifidni regtype, v
   210                                     %ifndef regsize
   211                                        %define regsize   128
   212                                     %endif
   213                                  %elifidni regtype, mmx
   214                                     %ifndef regsize
   215                                        %define regsize   64
   216                                     %endif
   217                                  %elifidni regtype, k
   218                                     %ifndef regsize
   219                                        %define regsize   16
   220                                     %endif
   221                                  %else
   222                                     %error unknown register type regtype
   223                                  %endif
   224                                  
   225                                  %ifidni regtype, mmx        ; 64 bit mmx registers
   226                                     %define reg0  mm0
   227                                     %define reg1  mm1
   228                                     %define reg2  mm2
   229                                     %define reg3  mm3
   230                                     %define reg4  mm4
   231                                     %define reg5  mm5
   232                                     %define reg6  mm6
   233                                     %define reg7  mm7
   234                                   ; %define sizeptr mmword
   235                                     %define sizeptr qword
   236                                     %define numregs 8
   237                                  %elifidni regtype, h       ; high 8-bit registers
   238                                     %define reg0  ah
   239                                     %define reg1  bh
   240                                     %define reg2  ch
   241                                     %define reg3  dh
   242                                     %define reg4  al
   243                                     %define reg5  bl
   244                                     %define reg6  cl
   245                                     %define reg7  dl
   246                                     %define sizeptr byte
   247                                     %define numregs 8
   248                                  %elifidni regtype, k       ; mask registers, any size
   249                                     %define reg0  k1
   250                                     %define reg1  k2
   251                                     %define reg2  k3
   252                                     %define reg3  k4
   253                                     %define reg4  k5
   254                                     %define reg5  k6
   255                                     %define reg6  k7
   256                                     %define numregs 7
   257                                     %if regsize == 8
   258                                        %define sizeptr byte
   259                                     %elif regsize == 16
   260                                        %define sizeptr word
   261                                     %elif regsize == 32
   262                                        %define sizeptr dword
   263                                     %elif regsize == 64
   264                                        %define sizeptr qword
   265                                     %else
   266                                        %error unknown size for mask registers
   267                                     %endif
   268                                  %elif regsize == 8             ; define registers of desired size
   269                                     %define reg0  al
   270                                     %define reg1  bl
   271                                     %define reg2  cl
   272                                     %define reg3  dl
   273                                     %define reg4  dil
   274                                     %define reg5  sil
   275                                     %define reg6  bpl
   276                                     %define reg7  r8b
   277                                     %define reg8  r9b
   278                                     %define reg9  r10b
   279                                     %define reg10 r11b
   280                                     %define sizeptr byte
   281                                     %define numregs 10
   282                                  %elif regsize == 16
   283                                     %define reg0  ax
   284                                     %define reg1  bx
   285                                     %define reg2  cx
   286                                     %define reg3  dx
   287                                     %define reg4  di
   288                                     %define reg5  si
   289                                     %define reg6  bp
   290                                     %define reg7  r8w
   291                                     %define reg8  r9w
   292                                     %define reg9  r10w
   293                                     %define reg10 r11w
   294                                     %define sizeptr word
   295                                     %define numregs 10
   296                                  %elif regsize == 32
   297                                     %define reg0  eax
   298                                     %define reg1  ebx
   299                                     %define reg2  ecx
   300                                     %define reg3  edx
   301                                     %define reg4  edi
   302                                     %define reg5  esi
   303                                     %define reg6  ebp
   304                                     %define reg7  r8d
   305                                     %define reg8  r9d
   306                                     %define reg9  r10d
   307                                     %define reg10 r11d
   308                                     %define sizeptr dword
   309                                     %define numregs 10
   310                                  %elif regsize == 64
   311                                     %define reg0  rax
   312                                     %define reg1  rbx
   313                                     %define reg2  rcx
   314                                     %define reg3  rdx
   315                                     %define reg4  rdi
   316                                     %define reg5  rsi
   317                                     %define reg6  rbp
   318                                     %define reg7  r8
   319                                     %define reg8  r9
   320                                     %define reg9  r10
   321                                     %define reg10 r11
   322                                     %define sizeptr qword
   323                                     %define numregs 10
   324                                  %elif regsize == 128
   325                                     %define reg0  xmm0
   326                                     %define reg1  xmm1
   327                                     %define reg2  xmm2
   328                                     %define reg3  xmm3
   329                                     %define reg4  xmm4
   330                                     %define reg5  xmm5
   331                                     %define reg6  xmm6
   332                                     %define reg7  xmm7
   333                                     %define reg8  xmm8
   334                                     %define reg9  xmm9
   335                                     %define reg10 xmm10
   336                                     %define reg11 xmm11
   337                                     %define reg12 xmm12
   338                                     %define sizeptr oword   
   339                                     %define numregs 12
   340                                  %elif regsize == 256
   341                                     %define reg0  ymm0
   342                                     %define reg1  ymm1
   343                                     %define reg2  ymm2
   344                                     %define reg3  ymm3
   345                                     %define reg4  ymm4
   346                                     %define reg5  ymm5
   347                                     %define reg6  ymm6
   348                                     %define reg7  ymm7
   349                                     %define reg8  ymm8
   350                                     %define reg9  ymm9
   351                                     %define reg10 ymm10
   352                                     %define reg11 ymm11
   353                                     %define reg12 ymm12
   354                                     %define sizeptr yword
   355                                     %define numregs 12
   356                                  %elif regsize == 512
   357                                     %define reg0  zmm0
   358                                     %define reg1  zmm1
   359                                     %define reg2  zmm2
   360                                     %define reg3  zmm3
   361                                     %define reg4  zmm4
   362                                     %define reg5  zmm5
   363                                     %define reg6  zmm6
   364                                     %define reg7  zmm7
   365                                     %define reg8  zmm8
   366                                     %define reg9  zmm9
   367                                     %define reg10 zmm10
   368                                     %define reg11 zmm11
   369                                     %define reg12 zmm12
   370                                     %define sizeptr zword      
   371                                     %define numregs 12
   372                                  %elif regsize == 0        ; unspecified size
   373                                     %define sizeptr
   374                                     %define numregs 0    
   375                                  %else
   376                                     %error unknown register size
   377                                  %endif
   378                                  
   379                                  %define modesize 64  ; indicate 64 bit mode
   380                                  
   381                                  ;-----------------------------------------------------------------------------
   382                                  
   383                                  global TestLoop
   384                                  global CounterTypesDesired
   385                                  global NumThreads
   386                                  global MaxNumCounters
   387                                  global UsePMC
   388                                  global PThreadData
   389                                  global ThreadDataSize
   390                                  global ClockResultsOS
   391                                  global PMCResultsOS
   392                                  global ThreadData
   393                                  global NumCounters
   394                                  global Counters
   395                                  global EventRegistersUsed
   396                                  global UserData
   397                                  global RatioOut
   398                                  global TempOut
   399                                  global RatioOutTitle
   400                                  global TempOutTitle
   401                                  global TempData
   402                                  
   403                                  section .note.GNU-stack noalloc noexec nowrite progbits
   404                                  
   405                                  SECTION .data   align = CACHELINESIZE
   406                                  default rel
   407                                  
   408                                  
   409                                  ;##############################################################################
   410                                  ;#
   411                                  ;#            List of desired counter types and other user definitions
   412                                  ;#
   413                                  ;##############################################################################
   414                                  ; Here you can select which performance monitor counters you want for your test.
   415                                  ; Select id numbers from the table CounterDefinitions[] in PMCTestA.cpp.
   416                                  
   417                                  %define USE_PERFORMANCE_COUNTERS   1        ; Tell if you are using performance counters
   418                                  
   419                                  ; Maximum number of PMC counters
   420                                  %define MAXCOUNTERS   8              ; must match value in PMCTest.h
   421                                  
   422                                  ; Number of PMC counters
   423                                  %define NUM_COUNTERS  8
   424                                  
   425                                  CounterTypesDesired:
   426 00000000 0100000009000000C9-         DD      counters                 ; macro with desired counter numbers
   426 00000009 000000FA000000     
   427 00000010 00000000<rept>          times (MAXCOUNTERS - ($-CounterTypesDesired)/4)  DD 0
   428                                  
   429                                  ; Number of threads
   430                                  %define NUM_THREADS   nthreads
   431                                  
   432                                  ; Subtract overhead from clock counts (0 if not)
   433                                  %define SUBTRACT_OVERHEAD  1
   434                                  
   435                                  ; Number of repetitions in loop to find overhead
   436                                  %define OVERHEAD_REPETITIONS  4
   437                                  
   438                                  ; Define array sizes
   439                                  %assign MAXREPEAT  REPETITIONS0
   440                                  
   441                                  
   442                                  ;##############################################################################
   443                                  ;#
   444                                  ;#                       global data
   445                                  ;#
   446                                  ;##############################################################################
   447                                  
   448                                  ; Per-thread data:
   449 00000020 00<rept>                align   CACHELINESIZE, DB 0
   450                                  ; Data for first thread
   451                                  ThreadData:                                                ; beginning of thread data block
   452 00000040 00000000<rept>          CountTemp:     times  (MAXCOUNTERS + 1)          DD   0    ; temporary storage of counts
   453 00000064 FFFFFFFF<rept>          CountOverhead: times  (MAXCOUNTERS + 1)          DD  -1    ; temporary storage of count overhead
   454 00000088 00000000<rept>          ClockResults:  times   REPETITIONS0              DD   0    ; clock counts
   455 000000A8 00000000<rept>          PMCResults:    times  (REPETITIONS0*MAXCOUNTERS)  DD   0    ; PMC counts
   456                                  align 8, DB 0
   457 000001A8 0000000000000000        RSPSave                                          DQ   0    ; save stack pointer
   458 000001B0 00<rept>                ALIGN   CACHELINESIZE, DB 0                                ; Make sure threads don't use same cache lines
   459                                  THREADDSIZE  equ     ($ - ThreadData)                      ; size of data block for each thread
   460                                  
   461                                  ; Define data blocks of same size for remaining threads
   462                                  %if  NUM_THREADS > 1
   463                                    times ((NUM_THREADS-1)*THREADDSIZE)            DB 0
   464                                  %endif
   465                                  
   466                                  ; Global data
   467 000001C0 [4000000000000000]      PThreadData     DQ    ThreadData                 ; Pointer to measured data for all threads
   468 000001C8 00000000                NumCounters     DD    0                          ; Will be number of valid counters
   469 000001CC 08000000                MaxNumCounters  DD    NUM_COUNTERS               ; Tell PMCTestA.CPP length of CounterTypesDesired
   470 000001D0 01000000                UsePMC          DD    USE_PERFORMANCE_COUNTERS   ; Tell PMCTestA.CPP if RDPMC used. Driver needed
   471 000001D4 01000000                NumThreads      DD    NUM_THREADS                ; Number of threads
   472 000001D8 80010000                ThreadDataSize  DD    THREADDSIZE                ; Size of each thread data block
   473 000001DC 48000000                ClockResultsOS  DD    ClockResults-ThreadData    ; Offset to ClockResults
   474 000001E0 68000000                PMCResultsOS    DD    PMCResults-ThreadData      ; Offset to PMCResults
   475 000001E4 00000000<rept>          Counters:             times MAXCOUNTERS   DD 0   ; Counter register numbers used will be inserted here
   476 00000204 00000000<rept>          EventRegistersUsed    times MAXCOUNTERS   DD 0   ; Set by MTMonA.cpp
   477                                  
   478                                  %ifmacro extraoutput                            ; define optional extra output columns
   479                                     extraoutput
   480                                  %else
   481 00000224 000000000000000000-        RatioOut      DD   0, 0, 0, 0                ; optional ratio output. Se PMCTest.h
   481 0000022D 00000000000000     
   482 00000234 00000000                   TempOut       DD   0                         ; optional arbitrary output. Se PMCTest.h
   483 00000238 0000000000000000           RatioOutTitle DQ   0                         ; column heading
   484 00000240 0000000000000000           TempOutTitle  DQ   0                         ; column heading
   485                                  %endif  
   486                                  
   487                                  
   488                                  ;##############################################################################
   489                                  ;#
   490                                  ;#                 User data
   491                                  ;#
   492                                  ;##############################################################################
   493 00000248 00<rept>                ALIGN   CACHELINESIZE, DB 0
   494                                  
   495                                  ; Put any data definitions your test code needs here
   496                                  
   497                                  UserData:
   498                                  %ifmacro testdata
   499                                          testdata
   500                                  %else
   501 00000280 00<rept>                        times 1000H  DB 0
   502                                  %endif
   503                                  
   504 00001280 0000000000000000-       TempData: times 4  DQ 0
   504 00001280 <rept>             
   505                                  
   506                                  ;##############################################################################
   507                                  ;#
   508                                  ;#                 Macro definitions used in test loop
   509                                  ;#
   510                                  ;##############################################################################
   511                                  
   512                                  %macro SERIALIZE 0             ; serialize CPU
   513                                         xor     eax, eax
   514                                         cpuid
   515                                  %endmacro
   516                                  
   517                                  %macro CLEARXMMREG 1           ; clear one xmm register
   518                                     pxor xmm%1, xmm%1
   519                                  %endmacro 
   520                                  
   521                                  %macro CLEARALLXMMREG 0        ; set all xmm or ymm registers to 0
   522                                     %if  USEAVX
   523                                        VZEROALL                 ; set all ymm registers to 0
   524                                     %else
   525                                        %assign i 0
   526                                        %rep 16
   527                                           CLEARXMMREG i         ; set all 16 xmm registers to 0
   528                                           %assign i i+1
   529                                        %endrep
   530                                     %endif
   531                                  %endmacro
   532                                  
   533                                  %macro READ_PMC_START 0
   534                                          ; save
   535                                          mov [TempData], rax
   536                                          mov [TempData+8], rbx
   537                                          mov [TempData+16], rcx
   538                                          mov [TempData+24], rdx
   539                                  
   540                                          SERIALIZE
   541                                  
   542                                          ; Add counters
   543                                  %assign i  0
   544                                  %rep    NUM_COUNTERS
   545                                          mov     ecx, [Counters + i*4]
   546                                          rdpmc
   547                                          add     [r13 + i*4 + 4 + (CountTemp-ThreadData)], eax
   548                                  %assign i  i+1
   549                                  %endrep
   550                                          SERIALIZE
   551                                  
   552                                          ; add time stamp counter
   553                                          rdtsc
   554                                          add     [r13 + (CountTemp-ThreadData)], eax
   555                                  
   556                                          ; restore
   557                                          mov rax, [TempData]
   558                                          mov rbx, [TempData+8]
   559                                          mov rcx, [TempData+16]
   560                                          mov rdx, [TempData+24]
   561                                  %endmacro
   562                                  
   563                                  %macro READ_PMC_END 0
   564                                          ; save
   565                                          mov [TempData], rax
   566                                          mov [TempData+8], rbx
   567                                          mov [TempData+16], rcx
   568                                          mov [TempData+24], rdx
   569                                  
   570                                          SERIALIZE
   571                                  
   572                                          ; sub time stamp counter
   573                                          rdtsc
   574                                          sub     [r13 + (CountTemp-ThreadData)], eax
   575                                  
   576                                          SERIALIZE
   577                                  
   578                                          ; Sub counters
   579                                  %assign i  0
   580                                  %rep    NUM_COUNTERS
   581                                          mov     ecx, [Counters + i*4]
   582                                          rdpmc
   583                                          sub     [r13 + i*4 + 4 + (CountTemp-ThreadData)], eax
   584                                  %assign i  i+1
   585                                  %endrep
   586                                  
   587                                          ; restore
   588                                          mov rax, [TempData]
   589                                          mov rbx, [TempData+8]
   590                                          mov rcx, [TempData+16]
   591                                          mov rdx, [TempData+24]
   592                                  %endmacro
   593                                  
   594                                  
   595                                  ;##############################################################################
   596                                  ;#
   597                                  ;#                    Test Loop
   598                                  ;#
   599                                  ;##############################################################################
   600                                  
   601                                  SECTION .text   align = codealign
   602                                  default rel
   603                                  
   604                                  ;extern "C" int TestLoop (int thread) {
   605                                  ; This function runs the code to test REPETITIONS0 times
   606                                  ; and reads the counters before and after each run:
   607                                  
   608                                  TestLoop:
   609 00000000 53                              push    rbx
   610 00000001 55                              push    rbp
   611 00000002 4154                            push    r12
   612 00000004 4155                            push    r13
   613 00000006 4156                            push    r14
   614 00000008 4157                            push    r15
   615                                  %if     WINDOWS                     ; These registers must be saved in Windows, not in Linux
   616                                          push    rsi
   617                                          push    rdi
   618                                          sub     rsp, 0A8H           ; Space for saving xmm6 - 15 and align
   619                                          movaps  [rsp], xmm6
   620                                          movaps  [rsp+10H], xmm7
   621                                          movaps  [rsp+20H], xmm8
   622                                          movaps  [rsp+30H], xmm9
   623                                          movaps  [rsp+40H], xmm10
   624                                          movaps  [rsp+50H], xmm11
   625                                          movaps  [rsp+60H], xmm12
   626                                          movaps  [rsp+70H], xmm13
   627                                          movaps  [rsp+80H], xmm14
   628                                          movaps  [rsp+90H], xmm15        
   629                                          mov     r15d, ecx          ; Thread number
   630                                  %else   ; Linux
   631 0000000A 4189FF                          mov     r15d, edi          ; Thread number
   632                                  %endif
   633                                          
   634                                  ; Register use:
   635                                  ;   r13: pointer to thread data block
   636                                  ;   r14: loop counter
   637                                  ;   r15: thread number
   638                                  ;   rax, rbx, rcx, rdx: scratch
   639                                  ;   all other registers: available to user program
   640                                  
   641                                  
   642                                  ;##############################################################################
   643                                  ;#
   644                                  ;#                 Warm up
   645                                  ;#
   646                                  ;##############################################################################
   647                                  ; Get into max frequency state
   648                                  
   649                                  %if WARMUPCOUNT
   650 0000000D B910270000                      mov ecx, WARMUPCOUNT / 10
   651 00000012 B801000000                      mov eax, 1
   652 00000017 90<rept>                        align 16
   653                                  Warmuploop:
   654                                          %rep 10
   655                                          imul eax, ecx
   656                                          %endrep
   656 00000020 0FAFC1              <1>  imul eax, ecx
   656 00000023 0FAFC1              <1>  imul eax, ecx
   656 00000026 0FAFC1              <1>  imul eax, ecx
   656 00000029 0FAFC1              <1>  imul eax, ecx
   656 0000002C 0FAFC1              <1>  imul eax, ecx
   656 0000002F 0FAFC1              <1>  imul eax, ecx
   656 00000032 0FAFC1              <1>  imul eax, ecx
   656 00000035 0FAFC1              <1>  imul eax, ecx
   656 00000038 0FAFC1              <1>  imul eax, ecx
   656 0000003B 0FAFC1              <1>  imul eax, ecx
   657 0000003E FFC9                            dec ecx
   658 00000040 75DE                            jnz Warmuploop
   659                                  
   660                                  %endif
   661                                  
   662                                  ;##############################################################################
   663                                  ;#
   664                                  ;#                 User Initializations 
   665                                  ;#
   666                                  ;##############################################################################
   667                                  ; You may add any initializations your test code needs here.
   668                                  ; Registers esi, edi, ebp and r8 - r12 will be unchanged from here to the 
   669                                  ; Test code start.
   670                                  ; 
   671                                  
   672 00000042 9BDBE3                          finit                 ; clear all FP registers
   673                                          
   674                                          CLEARALLXMMREG        ; clear all xmm or ymm registers
   674                              <1>  %if USEAVX
   674 00000045 C5FC77              <1>  VZEROALL
   674                              <1>  %else
   674                              <1>  %assign i 0
   674                              <1>  %rep 16
   674                              <1>  CLEARXMMREG i
   674                              <1>  %assign i i+1
   674                              <1>  %endrep
   674                              <1>  %endif
   675                                  
   676 00000048 4169C700040000                  imul eax, r15d, 400h ; separate data for each thread
   677 0000004F 488D35(80020000)                lea rsi, [UserData]
   678 00000056 4801C6                          add rsi, rax
   679 00000059 488DBE00020000                  lea rdi, [rsi+200h]
   680 00000060 31ED                            xor ebp, ebp
   681                                          
   682                                  %define psi rsi              ; esi in 32-bit mode, rsi in 64-bit mode
   683                                  
   684                                  %ifmacro testinit1
   685                                          testinit1
   686                                  %endif
   687                                          
   688                                  
   689                                  ;##############################################################################
   690                                  ;#
   691                                  ;#                 End of user Initializations 
   692                                  ;#
   693                                  ;##############################################################################
   694                                  
   695 00000062 4C8D2D(40000000)                lea     r13, [ThreadData]              ; address of first thread data block
   696 00000069 4169C780010000                  imul    eax, r15d, THREADDSIZE         ; offset to thread data block
   697 00000070 4901C5                          add     r13, rax                       ; address of current thread data block
   698 00000073 4989A568010000                  mov     [r13+(RSPSave-ThreadData)],rsp ; save stack pointer
   699                                  
   700                                  %if  SUBTRACT_OVERHEAD
   701                                  ; First test loop. Measure empty code
   702 0000007A 4531F6                          xor     r14d, r14d                     ; Loop counter
   703                                  
   704                                  TEST_LOOP_1:
   705                                  
   706                                          SERIALIZE
   706 0000007D 31C0                <1>  xor eax, eax
   706 0000007F 0FA2                <1>  cpuid
   707                                        
   708                                          ; Read counters
   709                                  %assign i  0
   710                                  %rep    NUM_COUNTERS
   711                                          mov     ecx, [Counters + i*4]
   712                                          rdpmc
   713                                          mov     [r13 + i*4 + 4 + (CountTemp-ThreadData)], eax
   714                                  %assign i  i+1
   715                                  %endrep
   715 00000081 8B0D(E4010000)      <1>  mov ecx, [Counters + i*4]
   715 00000087 0F33                <1>  rdpmc
   715 00000089 41894504            <1>  mov [r13 + i*4 + 4 + (CountTemp-ThreadData)], eax
   715                              <1> %assign i i+1
   715 0000008D 8B0D(E8010000)      <1>  mov ecx, [Counters + i*4]
   715 00000093 0F33                <1>  rdpmc
   715 00000095 41894508            <1>  mov [r13 + i*4 + 4 + (CountTemp-ThreadData)], eax
   715                              <1> %assign i i+1
   715 00000099 8B0D(EC010000)      <1>  mov ecx, [Counters + i*4]
   715 0000009F 0F33                <1>  rdpmc
   715 000000A1 4189450C            <1>  mov [r13 + i*4 + 4 + (CountTemp-ThreadData)], eax
   715                              <1> %assign i i+1
   715 000000A5 8B0D(F0010000)      <1>  mov ecx, [Counters + i*4]
   715 000000AB 0F33                <1>  rdpmc
   715 000000AD 41894510            <1>  mov [r13 + i*4 + 4 + (CountTemp-ThreadData)], eax
   715                              <1> %assign i i+1
   715 000000B1 8B0D(F4010000)      <1>  mov ecx, [Counters + i*4]
   715 000000B7 0F33                <1>  rdpmc
   715 000000B9 41894514            <1>  mov [r13 + i*4 + 4 + (CountTemp-ThreadData)], eax
   715                              <1> %assign i i+1
   715 000000BD 8B0D(F8010000)      <1>  mov ecx, [Counters + i*4]
   715 000000C3 0F33                <1>  rdpmc
   715 000000C5 41894518            <1>  mov [r13 + i*4 + 4 + (CountTemp-ThreadData)], eax
   715                              <1> %assign i i+1
   715 000000C9 8B0D(FC010000)      <1>  mov ecx, [Counters + i*4]
   715 000000CF 0F33                <1>  rdpmc
   715 000000D1 4189451C            <1>  mov [r13 + i*4 + 4 + (CountTemp-ThreadData)], eax
   715                              <1> %assign i i+1
   715 000000D5 8B0D(00020000)      <1>  mov ecx, [Counters + i*4]
   715 000000DB 0F33                <1>  rdpmc
   715 000000DD 41894520            <1>  mov [r13 + i*4 + 4 + (CountTemp-ThreadData)], eax
   715                              <1> %assign i i+1
   716                                        
   717                                  
   718                                          SERIALIZE
   718 000000E1 31C0                <1>  xor eax, eax
   718 000000E3 0FA2                <1>  cpuid
   719                                  
   720                                          ; read time stamp counter
   721 000000E5 0F31                            rdtsc
   722 000000E7 41894500                        mov     [r13 + (CountTemp-ThreadData)], eax
   723                                  
   724                                          SERIALIZE
   724 000000EB 31C0                <1>  xor eax, eax
   724 000000ED 0FA2                <1>  cpuid
   725                                  
   726                                          ; Empty. Test code goes here in next loop
   727                                  
   728                                          SERIALIZE
   728 000000EF 31C0                <1>  xor eax, eax
   728 000000F1 0FA2                <1>  cpuid
   729                                  
   730                                          ; read time stamp counter
   731 000000F3 0F31                            rdtsc
   732 000000F5 41294500                        sub     [r13 + (CountTemp-ThreadData)], eax        ; CountTemp[0]
   733                                  
   734                                          SERIALIZE
   734 000000F9 31C0                <1>  xor eax, eax
   734 000000FB 0FA2                <1>  cpuid
   735                                  
   736                                          ; Read counters
   737                                  %assign i  0
   738                                  %rep    NUM_COUNTERS
   739                                          mov     ecx, [Counters + i*4]
   740                                          rdpmc
   741                                          sub     [r13 + i*4 + 4 + (CountTemp-ThreadData)], eax
   742                                  %assign i  i+1
   743                                  %endrep
   743 000000FD 8B0D(E4010000)      <1>  mov ecx, [Counters + i*4]
   743 00000103 0F33                <1>  rdpmc
   743 00000105 41294504            <1>  sub [r13 + i*4 + 4 + (CountTemp-ThreadData)], eax
   743                              <1> %assign i i+1
   743 00000109 8B0D(E8010000)      <1>  mov ecx, [Counters + i*4]
   743 0000010F 0F33                <1>  rdpmc
   743 00000111 41294508            <1>  sub [r13 + i*4 + 4 + (CountTemp-ThreadData)], eax
   743                              <1> %assign i i+1
   743 00000115 8B0D(EC010000)      <1>  mov ecx, [Counters + i*4]
   743 0000011B 0F33                <1>  rdpmc
   743 0000011D 4129450C            <1>  sub [r13 + i*4 + 4 + (CountTemp-ThreadData)], eax
   743                              <1> %assign i i+1
   743 00000121 8B0D(F0010000)      <1>  mov ecx, [Counters + i*4]
   743 00000127 0F33                <1>  rdpmc
   743 00000129 41294510            <1>  sub [r13 + i*4 + 4 + (CountTemp-ThreadData)], eax
   743                              <1> %assign i i+1
   743 0000012D 8B0D(F4010000)      <1>  mov ecx, [Counters + i*4]
   743 00000133 0F33                <1>  rdpmc
   743 00000135 41294514            <1>  sub [r13 + i*4 + 4 + (CountTemp-ThreadData)], eax
   743                              <1> %assign i i+1
   743 00000139 8B0D(F8010000)      <1>  mov ecx, [Counters + i*4]
   743 0000013F 0F33                <1>  rdpmc
   743 00000141 41294518            <1>  sub [r13 + i*4 + 4 + (CountTemp-ThreadData)], eax
   743                              <1> %assign i i+1
   743 00000145 8B0D(FC010000)      <1>  mov ecx, [Counters + i*4]
   743 0000014B 0F33                <1>  rdpmc
   743 0000014D 4129451C            <1>  sub [r13 + i*4 + 4 + (CountTemp-ThreadData)], eax
   743                              <1> %assign i i+1
   743 00000151 8B0D(00020000)      <1>  mov ecx, [Counters + i*4]
   743 00000157 0F33                <1>  rdpmc
   743 00000159 41294520            <1>  sub [r13 + i*4 + 4 + (CountTemp-ThreadData)], eax
   743                              <1> %assign i i+1
   744                                  
   745                                          SERIALIZE
   745 0000015D 31C0                <1>  xor eax, eax
   745 0000015F 0FA2                <1>  cpuid
   746                                  
   747                                          ; find minimum counts
   748                                  %assign i  0
   749                                  %rep    NUM_COUNTERS + 1
   750                                          mov     eax, [r13+i*4+(CountTemp-ThreadData)]       ; -count
   751                                          neg     eax
   752                                          mov     ebx, [r13+i*4+(CountOverhead-ThreadData)]   ; previous count
   753                                          cmp     eax, ebx
   754                                          cmovb   ebx, eax
   755                                          mov     [r13+i*4+(CountOverhead-ThreadData)], ebx   ; minimum count        
   756                                  %assign i  i+1
   757                                  %endrep
   757 00000161 418B4500            <1>  mov eax, [r13+i*4+(CountTemp-ThreadData)]
   757 00000165 F7D8                <1>  neg eax
   757 00000167 418B5D24            <1>  mov ebx, [r13+i*4+(CountOverhead-ThreadData)]
   757 0000016B 39D8                <1>  cmp eax, ebx
   757 0000016D 0F42D8              <1>  cmovb ebx, eax
   757 00000170 41895D24            <1>  mov [r13+i*4+(CountOverhead-ThreadData)], ebx
   757                              <1> %assign i i+1
   757 00000174 418B4504            <1>  mov eax, [r13+i*4+(CountTemp-ThreadData)]
   757 00000178 F7D8                <1>  neg eax
   757 0000017A 418B5D28            <1>  mov ebx, [r13+i*4+(CountOverhead-ThreadData)]
   757 0000017E 39D8                <1>  cmp eax, ebx
   757 00000180 0F42D8              <1>  cmovb ebx, eax
   757 00000183 41895D28            <1>  mov [r13+i*4+(CountOverhead-ThreadData)], ebx
   757                              <1> %assign i i+1
   757 00000187 418B4508            <1>  mov eax, [r13+i*4+(CountTemp-ThreadData)]
   757 0000018B F7D8                <1>  neg eax
   757 0000018D 418B5D2C            <1>  mov ebx, [r13+i*4+(CountOverhead-ThreadData)]
   757 00000191 39D8                <1>  cmp eax, ebx
   757 00000193 0F42D8              <1>  cmovb ebx, eax
   757 00000196 41895D2C            <1>  mov [r13+i*4+(CountOverhead-ThreadData)], ebx
   757                              <1> %assign i i+1
   757 0000019A 418B450C            <1>  mov eax, [r13+i*4+(CountTemp-ThreadData)]
   757 0000019E F7D8                <1>  neg eax
   757 000001A0 418B5D30            <1>  mov ebx, [r13+i*4+(CountOverhead-ThreadData)]
   757 000001A4 39D8                <1>  cmp eax, ebx
   757 000001A6 0F42D8              <1>  cmovb ebx, eax
   757 000001A9 41895D30            <1>  mov [r13+i*4+(CountOverhead-ThreadData)], ebx
   757                              <1> %assign i i+1
   757 000001AD 418B4510            <1>  mov eax, [r13+i*4+(CountTemp-ThreadData)]
   757 000001B1 F7D8                <1>  neg eax
   757 000001B3 418B5D34            <1>  mov ebx, [r13+i*4+(CountOverhead-ThreadData)]
   757 000001B7 39D8                <1>  cmp eax, ebx
   757 000001B9 0F42D8              <1>  cmovb ebx, eax
   757 000001BC 41895D34            <1>  mov [r13+i*4+(CountOverhead-ThreadData)], ebx
   757                              <1> %assign i i+1
   757 000001C0 418B4514            <1>  mov eax, [r13+i*4+(CountTemp-ThreadData)]
   757 000001C4 F7D8                <1>  neg eax
   757 000001C6 418B5D38            <1>  mov ebx, [r13+i*4+(CountOverhead-ThreadData)]
   757 000001CA 39D8                <1>  cmp eax, ebx
   757 000001CC 0F42D8              <1>  cmovb ebx, eax
   757 000001CF 41895D38            <1>  mov [r13+i*4+(CountOverhead-ThreadData)], ebx
   757                              <1> %assign i i+1
   757 000001D3 418B4518            <1>  mov eax, [r13+i*4+(CountTemp-ThreadData)]
   757 000001D7 F7D8                <1>  neg eax
   757 000001D9 418B5D3C            <1>  mov ebx, [r13+i*4+(CountOverhead-ThreadData)]
   757 000001DD 39D8                <1>  cmp eax, ebx
   757 000001DF 0F42D8              <1>  cmovb ebx, eax
   757 000001E2 41895D3C            <1>  mov [r13+i*4+(CountOverhead-ThreadData)], ebx
   757                              <1> %assign i i+1
   757 000001E6 418B451C            <1>  mov eax, [r13+i*4+(CountTemp-ThreadData)]
   757 000001EA F7D8                <1>  neg eax
   757 000001EC 418B5D40            <1>  mov ebx, [r13+i*4+(CountOverhead-ThreadData)]
   757 000001F0 39D8                <1>  cmp eax, ebx
   757 000001F2 0F42D8              <1>  cmovb ebx, eax
   757 000001F5 41895D40            <1>  mov [r13+i*4+(CountOverhead-ThreadData)], ebx
   757                              <1> %assign i i+1
   757 000001F9 418B4520            <1>  mov eax, [r13+i*4+(CountTemp-ThreadData)]
   757 000001FD F7D8                <1>  neg eax
   757 000001FF 418B5D44            <1>  mov ebx, [r13+i*4+(CountOverhead-ThreadData)]
   757 00000203 39D8                <1>  cmp eax, ebx
   757 00000205 0F42D8              <1>  cmovb ebx, eax
   757 00000208 41895D44            <1>  mov [r13+i*4+(CountOverhead-ThreadData)], ebx
   757                              <1> %assign i i+1
   758                                          
   759                                          ; end second test loop
   760 0000020C 41FFC6                          inc     r14d
   761 0000020F 4183FE04                        cmp     r14d, OVERHEAD_REPETITIONS
   762 00000213 0F8264FEFFFF                    jb      TEST_LOOP_1
   763                                  
   764                                  %endif  ; SUBTRACT_OVERHEAD
   765                                  
   766                                          
   767                                  ; Second test loop. Measure user code
   768 00000219 4531F6                          xor     r14d, r14d                    ; Loop counter
   769                                  
   770                                  TEST_LOOP_2:
   771                                  
   772                                  %ifmacro testinitc
   773                                          testinitc
   774                                  %endif
   775                                  
   776                                          SERIALIZE
   776 0000021C 31C0                <1>  xor eax, eax
   776 0000021E 0FA2                <1>  cpuid
   777                                        
   778                                          ; Clear counters
   779                                  %assign i  0
   780                                  %rep    NUM_COUNTERS
   781                                          xor     eax, eax
   782                                          mov     [r13 + i*4 + 4 + (CountTemp-ThreadData)], eax
   783                                  %assign i  i+1
   784                                  %endrep
   784 00000220 31C0                <1>  xor eax, eax
   784 00000222 41894504            <1>  mov [r13 + i*4 + 4 + (CountTemp-ThreadData)], eax
   784                              <1> %assign i i+1
   784 00000226 31C0                <1>  xor eax, eax
   784 00000228 41894508            <1>  mov [r13 + i*4 + 4 + (CountTemp-ThreadData)], eax
   784                              <1> %assign i i+1
   784 0000022C 31C0                <1>  xor eax, eax
   784 0000022E 4189450C            <1>  mov [r13 + i*4 + 4 + (CountTemp-ThreadData)], eax
   784                              <1> %assign i i+1
   784 00000232 31C0                <1>  xor eax, eax
   784 00000234 41894510            <1>  mov [r13 + i*4 + 4 + (CountTemp-ThreadData)], eax
   784                              <1> %assign i i+1
   784 00000238 31C0                <1>  xor eax, eax
   784 0000023A 41894514            <1>  mov [r13 + i*4 + 4 + (CountTemp-ThreadData)], eax
   784                              <1> %assign i i+1
   784 0000023E 31C0                <1>  xor eax, eax
   784 00000240 41894518            <1>  mov [r13 + i*4 + 4 + (CountTemp-ThreadData)], eax
   784                              <1> %assign i i+1
   784 00000244 31C0                <1>  xor eax, eax
   784 00000246 4189451C            <1>  mov [r13 + i*4 + 4 + (CountTemp-ThreadData)], eax
   784                              <1> %assign i i+1
   784 0000024A 31C0                <1>  xor eax, eax
   784 0000024C 41894520            <1>  mov [r13 + i*4 + 4 + (CountTemp-ThreadData)], eax
   784                              <1> %assign i i+1
   785                                  
   786                                          SERIALIZE
   786 00000250 31C0                <1>  xor eax, eax
   786 00000252 0FA2                <1>  cpuid
   787                                  
   788                                          ; clear time stamp counter
   789 00000254 31C0                            xor     eax, eax
   790 00000256 41894500                        mov     [r13 + (CountTemp-ThreadData)], eax
   791                                  
   792                                          SERIALIZE
   792 0000025A 31C0                <1>  xor eax, eax
   792 0000025C 0FA2                <1>  cpuid
   793                                  
   794                                  ;##############################################################################
   795                                  ;#
   796                                  ;#                 Test code start
   797                                  ;#
   798                                  ;##############################################################################
   799                                  
   800                                  ; Put the assembly code to test here
   801                                  ; Don't modify r13, r14, r15!
   802                                  
   803                                  %ifmacro testinit2
   804                                          testinit2
   805                                  %endif
   806                                  
   807                                  %if REPETITIONS1 > 1
   808                                          mov r12d, REPETITIONS1
   809                                          align codealign
   810                                  REPETITIONS1LOOP:
   811                                  %endif
   812                                  
   813                                  %ifmacro testinit3
   814                                          testinit3
   814 0000025E BFE8030000          <1>  mov rdi, 1000
   814                              <1>  READ_PMC_START
   814                              <2> 
   814 00000263 488905(80120000)    <2>  mov [TempData], rax
   814 0000026A 48891D(88120000)    <2>  mov [TempData+8], rbx
   814 00000271 48890D(90120000)    <2>  mov [TempData+16], rcx
   814 00000278 488915(98120000)    <2>  mov [TempData+24], rdx
   814                              <2> 
   814                              <2>  SERIALIZE
   814 0000027F 31C0                <3>  xor eax, eax
   814 00000281 0FA2                <3>  cpuid
   814                              <2> 
   814                              <2> 
   814                              <2> %assign i 0
   814                              <2> %rep NUM_COUNTERS
   814                              <2>  mov ecx, [Counters + i*4]
   814                              <2>  rdpmc
   814                              <2>  add [r13 + i*4 + 4 + (CountTemp-ThreadData)], eax
   814                              <2> %assign i i+1
   814                              <2> %endrep
   814 00000283 8B0D(E4010000)      <3>  mov ecx, [Counters + i*4]
   814 00000289 0F33                <3>  rdpmc
   814 0000028B 41014504            <3>  add [r13 + i*4 + 4 + (CountTemp-ThreadData)], eax
   814                              <3> %assign i i+1
   814 0000028F 8B0D(E8010000)      <3>  mov ecx, [Counters + i*4]
   814 00000295 0F33                <3>  rdpmc
   814 00000297 41014508            <3>  add [r13 + i*4 + 4 + (CountTemp-ThreadData)], eax
   814                              <3> %assign i i+1
   814 0000029B 8B0D(EC010000)      <3>  mov ecx, [Counters + i*4]
   814 000002A1 0F33                <3>  rdpmc
   814 000002A3 4101450C            <3>  add [r13 + i*4 + 4 + (CountTemp-ThreadData)], eax
   814                              <3> %assign i i+1
   814 000002A7 8B0D(F0010000)      <3>  mov ecx, [Counters + i*4]
   814 000002AD 0F33                <3>  rdpmc
   814 000002AF 41014510            <3>  add [r13 + i*4 + 4 + (CountTemp-ThreadData)], eax
   814                              <3> %assign i i+1
   814 000002B3 8B0D(F4010000)      <3>  mov ecx, [Counters + i*4]
   814 000002B9 0F33                <3>  rdpmc
   814 000002BB 41014514            <3>  add [r13 + i*4 + 4 + (CountTemp-ThreadData)], eax
   814                              <3> %assign i i+1
   814 000002BF 8B0D(F8010000)      <3>  mov ecx, [Counters + i*4]
   814 000002C5 0F33                <3>  rdpmc
   814 000002C7 41014518            <3>  add [r13 + i*4 + 4 + (CountTemp-ThreadData)], eax
   814                              <3> %assign i i+1
   814 000002CB 8B0D(FC010000)      <3>  mov ecx, [Counters + i*4]
   814 000002D1 0F33                <3>  rdpmc
   814 000002D3 4101451C            <3>  add [r13 + i*4 + 4 + (CountTemp-ThreadData)], eax
   814                              <3> %assign i i+1
   814 000002D7 8B0D(00020000)      <3>  mov ecx, [Counters + i*4]
   814 000002DD 0F33                <3>  rdpmc
   814 000002DF 41014520            <3>  add [r13 + i*4 + 4 + (CountTemp-ThreadData)], eax
   814                              <3> %assign i i+1
   814                              <2>  SERIALIZE
   814 000002E3 31C0                <3>  xor eax, eax
   814 000002E5 0FA2                <3>  cpuid
   814                              <2> 
   814                              <2> 
   814 000002E7 0F31                <2>  rdtsc
   814 000002E9 41014500            <2>  add [r13 + (CountTemp-ThreadData)], eax
   814                              <2> 
   814                              <2> 
   814 000002ED 488B05(80120000)    <2>  mov rax, [TempData]
   814 000002F4 488B1D(88120000)    <2>  mov rbx, [TempData+8]
   814 000002FB 488B0D(90120000)    <2>  mov rcx, [TempData+16]
   814 00000302 488B15(98120000)    <2>  mov rdx, [TempData+24]
   814                              <1> 
   814                              <1> loop_begin:
   814                              <1> 
   814                              <1> 
   814 00000309 0FC7F0              <1>  rdrand eax
   814 0000030C 83E001              <1>  and eax, 1
   814 0000030F 7500                <1>  jnz first_target
   814                              <1> first_target:
   814                              <1> 
   814                              <1> 
   814                              <1>  %assign i 1
   814                              <1>  %rep dummybranches
   814                              <1>  jmp dummy_branch_%+ i
   814                              <1> dummy_branch_%+ i:
   814                              <1>  %assign i i+1
   814                              <1>  %endrep
   814 00000311 EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 00000313 EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 00000315 EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 00000317 EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 00000319 EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 0000031B EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 0000031D EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 0000031F EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 00000321 EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 00000323 EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 00000325 EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 00000327 EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 00000329 EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 0000032B EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 0000032D EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 0000032F EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 00000331 EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 00000333 EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 00000335 EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 00000337 EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 00000339 EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 0000033B EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 0000033D EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 0000033F EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 00000341 EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 00000343 EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 00000345 EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 00000347 EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 00000349 EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 0000034B EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 0000034D EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 0000034F EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 00000351 EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 00000353 EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 00000355 EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 00000357 EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 00000359 EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 0000035B EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 0000035D EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 0000035F EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 00000361 EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 00000363 EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 00000365 EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 00000367 EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 00000369 EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 0000036B EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 0000036D EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 0000036F EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 00000371 EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 00000373 EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 00000375 EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 00000377 EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 00000379 EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 0000037B EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 0000037D EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 0000037F EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 00000381 EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 00000383 EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 00000385 EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 00000387 EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 00000389 EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 0000038B EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 0000038D EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 0000038F EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 00000391 EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 00000393 EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 00000395 EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 00000397 EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 00000399 EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 0000039B EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 0000039D EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 0000039F EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 000003A1 EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 000003A3 EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 000003A5 EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 000003A7 EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 000003A9 EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 000003AB EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 000003AD EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 000003AF EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 000003B1 EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 000003B3 EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 000003B5 EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 000003B7 EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 000003B9 EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 000003BB EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 000003BD EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 000003BF EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 000003C1 EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 000003C3 EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 000003C5 EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 000003C7 EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 000003C9 EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 000003CB EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 000003CD EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 000003CF EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 000003D1 EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 000003D3 EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 000003D5 EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 000003D7 EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 000003D9 EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 000003DB EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 000003DD EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 000003DF EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 000003E1 EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 000003E3 EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 000003E5 EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 000003E7 EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 000003E9 EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 000003EB EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 000003ED EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 000003EF EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 000003F1 EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 000003F3 EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 000003F5 EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 000003F7 EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 000003F9 EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 000003FB EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 000003FD EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 000003FF EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 00000401 EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 00000403 EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 00000405 EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 00000407 EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 00000409 EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 0000040B EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 0000040D EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 0000040F EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 00000411 EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 00000413 EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 00000415 EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 00000417 EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 00000419 EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 0000041B EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 0000041D EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 0000041F EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 00000421 EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 00000423 EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 00000425 EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 00000427 EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 00000429 EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 0000042B EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 0000042D EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 0000042F EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 00000431 EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 00000433 EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 00000435 EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 00000437 EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814 00000439 EB00                <2>  jmp dummy_branch_%+ i
   814                              <2> dummy_branch_%+ i:
   814                              <2>  %assign i i+1
   814                              <1> 
   814                              <1> 
   814 0000043B 85C0                <1>  test eax, eax
   814 0000043D 7500                <1>  jnz second_target
   814                              <1> second_target:
   814                              <1> 
   814 0000043F 48FFCF              <1>  dec rdi
   814 00000442 0F85C1FEFFFF        <1>  jnz loop_begin
   814                              <1> 
   814                              <1>  READ_PMC_END
   814                              <2> 
   814 00000448 488905(80120000)    <2>  mov [TempData], rax
   814 0000044F 48891D(88120000)    <2>  mov [TempData+8], rbx
   814 00000456 48890D(90120000)    <2>  mov [TempData+16], rcx
   814 0000045D 488915(98120000)    <2>  mov [TempData+24], rdx
   814                              <2> 
   814                              <2>  SERIALIZE
   814 00000464 31C0                <3>  xor eax, eax
   814 00000466 0FA2                <3>  cpuid
   814                              <2> 
   814                              <2> 
   814 00000468 0F31                <2>  rdtsc
   814 0000046A 41294500            <2>  sub [r13 + (CountTemp-ThreadData)], eax
   814                              <2> 
   814                              <2>  SERIALIZE
   814 0000046E 31C0                <3>  xor eax, eax
   814 00000470 0FA2                <3>  cpuid
   814                              <2> 
   814                              <2> 
   814                              <2> %assign i 0
   814                              <2> %rep NUM_COUNTERS
   814                              <2>  mov ecx, [Counters + i*4]
   814                              <2>  rdpmc
   814                              <2>  sub [r13 + i*4 + 4 + (CountTemp-ThreadData)], eax
   814                              <2> %assign i i+1
   814                              <2> %endrep
   814 00000472 8B0D(E4010000)      <3>  mov ecx, [Counters + i*4]
   814 00000478 0F33                <3>  rdpmc
   814 0000047A 41294504            <3>  sub [r13 + i*4 + 4 + (CountTemp-ThreadData)], eax
   814                              <3> %assign i i+1
   814 0000047E 8B0D(E8010000)      <3>  mov ecx, [Counters + i*4]
   814 00000484 0F33                <3>  rdpmc
   814 00000486 41294508            <3>  sub [r13 + i*4 + 4 + (CountTemp-ThreadData)], eax
   814                              <3> %assign i i+1
   814 0000048A 8B0D(EC010000)      <3>  mov ecx, [Counters + i*4]
   814 00000490 0F33                <3>  rdpmc
   814 00000492 4129450C            <3>  sub [r13 + i*4 + 4 + (CountTemp-ThreadData)], eax
   814                              <3> %assign i i+1
   814 00000496 8B0D(F0010000)      <3>  mov ecx, [Counters + i*4]
   814 0000049C 0F33                <3>  rdpmc
   814 0000049E 41294510            <3>  sub [r13 + i*4 + 4 + (CountTemp-ThreadData)], eax
   814                              <3> %assign i i+1
   814 000004A2 8B0D(F4010000)      <3>  mov ecx, [Counters + i*4]
   814 000004A8 0F33                <3>  rdpmc
   814 000004AA 41294514            <3>  sub [r13 + i*4 + 4 + (CountTemp-ThreadData)], eax
   814                              <3> %assign i i+1
   814 000004AE 8B0D(F8010000)      <3>  mov ecx, [Counters + i*4]
   814 000004B4 0F33                <3>  rdpmc
   814 000004B6 41294518            <3>  sub [r13 + i*4 + 4 + (CountTemp-ThreadData)], eax
   814                              <3> %assign i i+1
   814 000004BA 8B0D(FC010000)      <3>  mov ecx, [Counters + i*4]
   814 000004C0 0F33                <3>  rdpmc
   814 000004C2 4129451C            <3>  sub [r13 + i*4 + 4 + (CountTemp-ThreadData)], eax
   814                              <3> %assign i i+1
   814 000004C6 8B0D(00020000)      <3>  mov ecx, [Counters + i*4]
   814 000004CC 0F33                <3>  rdpmc
   814 000004CE 41294520            <3>  sub [r13 + i*4 + 4 + (CountTemp-ThreadData)], eax
   814                              <3> %assign i i+1
   814                              <2> 
   814                              <2> 
   814 000004D2 488B05(80120000)    <2>  mov rax, [TempData]
   814 000004D9 488B1D(88120000)    <2>  mov rbx, [TempData+8]
   814 000004E0 488B0D(90120000)    <2>  mov rcx, [TempData+16]
   814 000004E7 488B15(98120000)    <2>  mov rdx, [TempData+24]
   814                              <1> 
   814                              <1> 
   815                                  %endif
   816                                  
   817                                  %rep REPETITIONS2
   818                                          ; test code inserted as macro
   819                                          testcode
   820                                  %endrep
   820                              <1> 
   820                              <1>  testcode
   820                              <2>  %if numop == 0
   820 000004EE 90                  <2>  instruct immoperands0
   820                              <2>  %elif numop == 1
   820                              <2>  instruct reg0 immoperands1
   820                              <2>  %elif numop == 2
   820                              <2>  instruct reg0, reg1 immoperands1
   820                              <2>  %elif numop == 3
   820                              <2>  instruct reg0, reg0, reg1 immoperands1
   820                              <2>  %else
   820                              <2>  %error "unknown numop"
   820                              <2>  %endif
   820                              <2>  instruct2
   820                              <1> 
   820                              <1>  testcode
   820                              <2>  %if numop == 0
   820 000004EF 90                  <2>  instruct immoperands0
   820                              <2>  %elif numop == 1
   820                              <2>  instruct reg0 immoperands1
   820                              <2>  %elif numop == 2
   820                              <2>  instruct reg0, reg1 immoperands1
   820                              <2>  %elif numop == 3
   820                              <2>  instruct reg0, reg0, reg1 immoperands1
   820                              <2>  %else
   820                              <2>  %error "unknown numop"
   820                              <2>  %endif
   820                              <2>  instruct2
   820                              <1> 
   820                              <1>  testcode
   820                              <2>  %if numop == 0
   820 000004F0 90                  <2>  instruct immoperands0
   820                              <2>  %elif numop == 1
   820                              <2>  instruct reg0 immoperands1
   820                              <2>  %elif numop == 2
   820                              <2>  instruct reg0, reg1 immoperands1
   820                              <2>  %elif numop == 3
   820                              <2>  instruct reg0, reg0, reg1 immoperands1
   820                              <2>  %else
   820                              <2>  %error "unknown numop"
   820                              <2>  %endif
   820                              <2>  instruct2
   820                              <1> 
   820                              <1>  testcode
   820                              <2>  %if numop == 0
   820 000004F1 90                  <2>  instruct immoperands0
   820                              <2>  %elif numop == 1
   820                              <2>  instruct reg0 immoperands1
   820                              <2>  %elif numop == 2
   820                              <2>  instruct reg0, reg1 immoperands1
   820                              <2>  %elif numop == 3
   820                              <2>  instruct reg0, reg0, reg1 immoperands1
   820                              <2>  %else
   820                              <2>  %error "unknown numop"
   820                              <2>  %endif
   820                              <2>  instruct2
   820                              <1> 
   820                              <1>  testcode
   820                              <2>  %if numop == 0
   820 000004F2 90                  <2>  instruct immoperands0
   820                              <2>  %elif numop == 1
   820                              <2>  instruct reg0 immoperands1
   820                              <2>  %elif numop == 2
   820                              <2>  instruct reg0, reg1 immoperands1
   820                              <2>  %elif numop == 3
   820                              <2>  instruct reg0, reg0, reg1 immoperands1
   820                              <2>  %else
   820                              <2>  %error "unknown numop"
   820                              <2>  %endif
   820                              <2>  instruct2
   820                              <1> 
   820                              <1>  testcode
   820                              <2>  %if numop == 0
   820 000004F3 90                  <2>  instruct immoperands0
   820                              <2>  %elif numop == 1
   820                              <2>  instruct reg0 immoperands1
   820                              <2>  %elif numop == 2
   820                              <2>  instruct reg0, reg1 immoperands1
   820                              <2>  %elif numop == 3
   820                              <2>  instruct reg0, reg0, reg1 immoperands1
   820                              <2>  %else
   820                              <2>  %error "unknown numop"
   820                              <2>  %endif
   820                              <2>  instruct2
   820                              <1> 
   820                              <1>  testcode
   820                              <2>  %if numop == 0
   820 000004F4 90                  <2>  instruct immoperands0
   820                              <2>  %elif numop == 1
   820                              <2>  instruct reg0 immoperands1
   820                              <2>  %elif numop == 2
   820                              <2>  instruct reg0, reg1 immoperands1
   820                              <2>  %elif numop == 3
   820                              <2>  instruct reg0, reg0, reg1 immoperands1
   820                              <2>  %else
   820                              <2>  %error "unknown numop"
   820                              <2>  %endif
   820                              <2>  instruct2
   820                              <1> 
   820                              <1>  testcode
   820                              <2>  %if numop == 0
   820 000004F5 90                  <2>  instruct immoperands0
   820                              <2>  %elif numop == 1
   820                              <2>  instruct reg0 immoperands1
   820                              <2>  %elif numop == 2
   820                              <2>  instruct reg0, reg1 immoperands1
   820                              <2>  %elif numop == 3
   820                              <2>  instruct reg0, reg0, reg1 immoperands1
   820                              <2>  %else
   820                              <2>  %error "unknown numop"
   820                              <2>  %endif
   820                              <2>  instruct2
   820                              <1> 
   820                              <1>  testcode
   820                              <2>  %if numop == 0
   820 000004F6 90                  <2>  instruct immoperands0
   820                              <2>  %elif numop == 1
   820                              <2>  instruct reg0 immoperands1
   820                              <2>  %elif numop == 2
   820                              <2>  instruct reg0, reg1 immoperands1
   820                              <2>  %elif numop == 3
   820                              <2>  instruct reg0, reg0, reg1 immoperands1
   820                              <2>  %else
   820                              <2>  %error "unknown numop"
   820                              <2>  %endif
   820                              <2>  instruct2
   820                              <1> 
   820                              <1>  testcode
   820                              <2>  %if numop == 0
   820 000004F7 90                  <2>  instruct immoperands0
   820                              <2>  %elif numop == 1
   820                              <2>  instruct reg0 immoperands1
   820                              <2>  %elif numop == 2
   820                              <2>  instruct reg0, reg1 immoperands1
   820                              <2>  %elif numop == 3
   820                              <2>  instruct reg0, reg0, reg1 immoperands1
   820                              <2>  %else
   820                              <2>  %error "unknown numop"
   820                              <2>  %endif
   820                              <2>  instruct2
   820                              <1> 
   820                              <1>  testcode
   820                              <2>  %if numop == 0
   820 000004F8 90                  <2>  instruct immoperands0
   820                              <2>  %elif numop == 1
   820                              <2>  instruct reg0 immoperands1
   820                              <2>  %elif numop == 2
   820                              <2>  instruct reg0, reg1 immoperands1
   820                              <2>  %elif numop == 3
   820                              <2>  instruct reg0, reg0, reg1 immoperands1
   820                              <2>  %else
   820                              <2>  %error "unknown numop"
   820                              <2>  %endif
   820                              <2>  instruct2
   820                              <1> 
   820                              <1>  testcode
   820                              <2>  %if numop == 0
   820 000004F9 90                  <2>  instruct immoperands0
   820                              <2>  %elif numop == 1
   820                              <2>  instruct reg0 immoperands1
   820                              <2>  %elif numop == 2
   820                              <2>  instruct reg0, reg1 immoperands1
   820                              <2>  %elif numop == 3
   820                              <2>  instruct reg0, reg0, reg1 immoperands1
   820                              <2>  %else
   820                              <2>  %error "unknown numop"
   820                              <2>  %endif
   820                              <2>  instruct2
   820                              <1> 
   820                              <1>  testcode
   820                              <2>  %if numop == 0
   820 000004FA 90                  <2>  instruct immoperands0
   820                              <2>  %elif numop == 1
   820                              <2>  instruct reg0 immoperands1
   820                              <2>  %elif numop == 2
   820                              <2>  instruct reg0, reg1 immoperands1
   820                              <2>  %elif numop == 3
   820                              <2>  instruct reg0, reg0, reg1 immoperands1
   820                              <2>  %else
   820                              <2>  %error "unknown numop"
   820                              <2>  %endif
   820                              <2>  instruct2
   820                              <1> 
   820                              <1>  testcode
   820                              <2>  %if numop == 0
   820 000004FB 90                  <2>  instruct immoperands0
   820                              <2>  %elif numop == 1
   820                              <2>  instruct reg0 immoperands1
   820                              <2>  %elif numop == 2
   820                              <2>  instruct reg0, reg1 immoperands1
   820                              <2>  %elif numop == 3
   820                              <2>  instruct reg0, reg0, reg1 immoperands1
   820                              <2>  %else
   820                              <2>  %error "unknown numop"
   820                              <2>  %endif
   820                              <2>  instruct2
   820                              <1> 
   820                              <1>  testcode
   820                              <2>  %if numop == 0
   820 000004FC 90                  <2>  instruct immoperands0
   820                              <2>  %elif numop == 1
   820                              <2>  instruct reg0 immoperands1
   820                              <2>  %elif numop == 2
   820                              <2>  instruct reg0, reg1 immoperands1
   820                              <2>  %elif numop == 3
   820                              <2>  instruct reg0, reg0, reg1 immoperands1
   820                              <2>  %else
   820                              <2>  %error "unknown numop"
   820                              <2>  %endif
   820                              <2>  instruct2
   820                              <1> 
   820                              <1>  testcode
   820                              <2>  %if numop == 0
   820 000004FD 90                  <2>  instruct immoperands0
   820                              <2>  %elif numop == 1
   820                              <2>  instruct reg0 immoperands1
   820                              <2>  %elif numop == 2
   820                              <2>  instruct reg0, reg1 immoperands1
   820                              <2>  %elif numop == 3
   820                              <2>  instruct reg0, reg0, reg1 immoperands1
   820                              <2>  %else
   820                              <2>  %error "unknown numop"
   820                              <2>  %endif
   820                              <2>  instruct2
   820                              <1> 
   820                              <1>  testcode
   820                              <2>  %if numop == 0
   820 000004FE 90                  <2>  instruct immoperands0
   820                              <2>  %elif numop == 1
   820                              <2>  instruct reg0 immoperands1
   820                              <2>  %elif numop == 2
   820                              <2>  instruct reg0, reg1 immoperands1
   820                              <2>  %elif numop == 3
   820                              <2>  instruct reg0, reg0, reg1 immoperands1
   820                              <2>  %else
   820                              <2>  %error "unknown numop"
   820                              <2>  %endif
   820                              <2>  instruct2
   820                              <1> 
   820                              <1>  testcode
   820                              <2>  %if numop == 0
   820 000004FF 90                  <2>  instruct immoperands0
   820                              <2>  %elif numop == 1
   820                              <2>  instruct reg0 immoperands1
   820                              <2>  %elif numop == 2
   820                              <2>  instruct reg0, reg1 immoperands1
   820                              <2>  %elif numop == 3
   820                              <2>  instruct reg0, reg0, reg1 immoperands1
   820                              <2>  %else
   820                              <2>  %error "unknown numop"
   820                              <2>  %endif
   820                              <2>  instruct2
   820                              <1> 
   820                              <1>  testcode
   820                              <2>  %if numop == 0
   820 00000500 90                  <2>  instruct immoperands0
   820                              <2>  %elif numop == 1
   820                              <2>  instruct reg0 immoperands1
   820                              <2>  %elif numop == 2
   820                              <2>  instruct reg0, reg1 immoperands1
   820                              <2>  %elif numop == 3
   820                              <2>  instruct reg0, reg0, reg1 immoperands1
   820                              <2>  %else
   820                              <2>  %error "unknown numop"
   820                              <2>  %endif
   820                              <2>  instruct2
   820                              <1> 
   820                              <1>  testcode
   820                              <2>  %if numop == 0
   820 00000501 90                  <2>  instruct immoperands0
   820                              <2>  %elif numop == 1
   820                              <2>  instruct reg0 immoperands1
   820                              <2>  %elif numop == 2
   820                              <2>  instruct reg0, reg1 immoperands1
   820                              <2>  %elif numop == 3
   820                              <2>  instruct reg0, reg0, reg1 immoperands1
   820                              <2>  %else
   820                              <2>  %error "unknown numop"
   820                              <2>  %endif
   820                              <2>  instruct2
   820                              <1> 
   820                              <1>  testcode
   820                              <2>  %if numop == 0
   820 00000502 90                  <2>  instruct immoperands0
   820                              <2>  %elif numop == 1
   820                              <2>  instruct reg0 immoperands1
   820                              <2>  %elif numop == 2
   820                              <2>  instruct reg0, reg1 immoperands1
   820                              <2>  %elif numop == 3
   820                              <2>  instruct reg0, reg0, reg1 immoperands1
   820                              <2>  %else
   820                              <2>  %error "unknown numop"
   820                              <2>  %endif
   820                              <2>  instruct2
   820                              <1> 
   820                              <1>  testcode
   820                              <2>  %if numop == 0
   820 00000503 90                  <2>  instruct immoperands0
   820                              <2>  %elif numop == 1
   820                              <2>  instruct reg0 immoperands1
   820                              <2>  %elif numop == 2
   820                              <2>  instruct reg0, reg1 immoperands1
   820                              <2>  %elif numop == 3
   820                              <2>  instruct reg0, reg0, reg1 immoperands1
   820                              <2>  %else
   820                              <2>  %error "unknown numop"
   820                              <2>  %endif
   820                              <2>  instruct2
   820                              <1> 
   820                              <1>  testcode
   820                              <2>  %if numop == 0
   820 00000504 90                  <2>  instruct immoperands0
   820                              <2>  %elif numop == 1
   820                              <2>  instruct reg0 immoperands1
   820                              <2>  %elif numop == 2
   820                              <2>  instruct reg0, reg1 immoperands1
   820                              <2>  %elif numop == 3
   820                              <2>  instruct reg0, reg0, reg1 immoperands1
   820                              <2>  %else
   820                              <2>  %error "unknown numop"
   820                              <2>  %endif
   820                              <2>  instruct2
   820                              <1> 
   820                              <1>  testcode
   820                              <2>  %if numop == 0
   820 00000505 90                  <2>  instruct immoperands0
   820                              <2>  %elif numop == 1
   820                              <2>  instruct reg0 immoperands1
   820                              <2>  %elif numop == 2
   820                              <2>  instruct reg0, reg1 immoperands1
   820                              <2>  %elif numop == 3
   820                              <2>  instruct reg0, reg0, reg1 immoperands1
   820                              <2>  %else
   820                              <2>  %error "unknown numop"
   820                              <2>  %endif
   820                              <2>  instruct2
   820                              <1> 
   820                              <1>  testcode
   820                              <2>  %if numop == 0
   820 00000506 90                  <2>  instruct immoperands0
   820                              <2>  %elif numop == 1
   820                              <2>  instruct reg0 immoperands1
   820                              <2>  %elif numop == 2
   820                              <2>  instruct reg0, reg1 immoperands1
   820                              <2>  %elif numop == 3
   820                              <2>  instruct reg0, reg0, reg1 immoperands1
   820                              <2>  %else
   820                              <2>  %error "unknown numop"
   820                              <2>  %endif
   820                              <2>  instruct2
   820                              <1> 
   820                              <1>  testcode
   820                              <2>  %if numop == 0
   820 00000507 90                  <2>  instruct immoperands0
   820                              <2>  %elif numop == 1
   820                              <2>  instruct reg0 immoperands1
   820                              <2>  %elif numop == 2
   820                              <2>  instruct reg0, reg1 immoperands1
   820                              <2>  %elif numop == 3
   820                              <2>  instruct reg0, reg0, reg1 immoperands1
   820                              <2>  %else
   820                              <2>  %error "unknown numop"
   820                              <2>  %endif
   820                              <2>  instruct2
   820                              <1> 
   820                              <1>  testcode
   820                              <2>  %if numop == 0
   820 00000508 90                  <2>  instruct immoperands0
   820                              <2>  %elif numop == 1
   820                              <2>  instruct reg0 immoperands1
   820                              <2>  %elif numop == 2
   820                              <2>  instruct reg0, reg1 immoperands1
   820                              <2>  %elif numop == 3
   820                              <2>  instruct reg0, reg0, reg1 immoperands1
   820                              <2>  %else
   820                              <2>  %error "unknown numop"
   820                              <2>  %endif
   820                              <2>  instruct2
   820                              <1> 
   820                              <1>  testcode
   820                              <2>  %if numop == 0
   820 00000509 90                  <2>  instruct immoperands0
   820                              <2>  %elif numop == 1
   820                              <2>  instruct reg0 immoperands1
   820                              <2>  %elif numop == 2
   820                              <2>  instruct reg0, reg1 immoperands1
   820                              <2>  %elif numop == 3
   820                              <2>  instruct reg0, reg0, reg1 immoperands1
   820                              <2>  %else
   820                              <2>  %error "unknown numop"
   820                              <2>  %endif
   820                              <2>  instruct2
   820                              <1> 
   820                              <1>  testcode
   820                              <2>  %if numop == 0
   820 0000050A 90                  <2>  instruct immoperands0
   820                              <2>  %elif numop == 1
   820                              <2>  instruct reg0 immoperands1
   820                              <2>  %elif numop == 2
   820                              <2>  instruct reg0, reg1 immoperands1
   820                              <2>  %elif numop == 3
   820                              <2>  instruct reg0, reg0, reg1 immoperands1
   820                              <2>  %else
   820                              <2>  %error "unknown numop"
   820                              <2>  %endif
   820                              <2>  instruct2
   820                              <1> 
   820                              <1>  testcode
   820                              <2>  %if numop == 0
   820 0000050B 90                  <2>  instruct immoperands0
   820                              <2>  %elif numop == 1
   820                              <2>  instruct reg0 immoperands1
   820                              <2>  %elif numop == 2
   820                              <2>  instruct reg0, reg1 immoperands1
   820                              <2>  %elif numop == 3
   820                              <2>  instruct reg0, reg0, reg1 immoperands1
   820                              <2>  %else
   820                              <2>  %error "unknown numop"
   820                              <2>  %endif
   820                              <2>  instruct2
   820                              <1> 
   820                              <1>  testcode
   820                              <2>  %if numop == 0
   820 0000050C 90                  <2>  instruct immoperands0
   820                              <2>  %elif numop == 1
   820                              <2>  instruct reg0 immoperands1
   820                              <2>  %elif numop == 2
   820                              <2>  instruct reg0, reg1 immoperands1
   820                              <2>  %elif numop == 3
   820                              <2>  instruct reg0, reg0, reg1 immoperands1
   820                              <2>  %else
   820                              <2>  %error "unknown numop"
   820                              <2>  %endif
   820                              <2>  instruct2
   820                              <1> 
   820                              <1>  testcode
   820                              <2>  %if numop == 0
   820 0000050D 90                  <2>  instruct immoperands0
   820                              <2>  %elif numop == 1
   820                              <2>  instruct reg0 immoperands1
   820                              <2>  %elif numop == 2
   820                              <2>  instruct reg0, reg1 immoperands1
   820                              <2>  %elif numop == 3
   820                              <2>  instruct reg0, reg0, reg1 immoperands1
   820                              <2>  %else
   820                              <2>  %error "unknown numop"
   820                              <2>  %endif
   820                              <2>  instruct2
   820                              <1> 
   820                              <1>  testcode
   820                              <2>  %if numop == 0
   820 0000050E 90                  <2>  instruct immoperands0
   820                              <2>  %elif numop == 1
   820                              <2>  instruct reg0 immoperands1
   820                              <2>  %elif numop == 2
   820                              <2>  instruct reg0, reg1 immoperands1
   820                              <2>  %elif numop == 3
   820                              <2>  instruct reg0, reg0, reg1 immoperands1
   820                              <2>  %else
   820                              <2>  %error "unknown numop"
   820                              <2>  %endif
   820                              <2>  instruct2
   820                              <1> 
   820                              <1>  testcode
   820                              <2>  %if numop == 0
   820 0000050F 90                  <2>  instruct immoperands0
   820                              <2>  %elif numop == 1
   820                              <2>  instruct reg0 immoperands1
   820                              <2>  %elif numop == 2
   820                              <2>  instruct reg0, reg1 immoperands1
   820                              <2>  %elif numop == 3
   820                              <2>  instruct reg0, reg0, reg1 immoperands1
   820                              <2>  %else
   820                              <2>  %error "unknown numop"
   820                              <2>  %endif
   820                              <2>  instruct2
   820                              <1> 
   820                              <1>  testcode
   820                              <2>  %if numop == 0
   820 00000510 90                  <2>  instruct immoperands0
   820                              <2>  %elif numop == 1
   820                              <2>  instruct reg0 immoperands1
   820                              <2>  %elif numop == 2
   820                              <2>  instruct reg0, reg1 immoperands1
   820                              <2>  %elif numop == 3
   820                              <2>  instruct reg0, reg0, reg1 immoperands1
   820                              <2>  %else
   820                              <2>  %error "unknown numop"
   820                              <2>  %endif
   820                              <2>  instruct2
   820                              <1> 
   820                              <1>  testcode
   820                              <2>  %if numop == 0
   820 00000511 90                  <2>  instruct immoperands0
   820                              <2>  %elif numop == 1
   820                              <2>  instruct reg0 immoperands1
   820                              <2>  %elif numop == 2
   820                              <2>  instruct reg0, reg1 immoperands1
   820                              <2>  %elif numop == 3
   820                              <2>  instruct reg0, reg0, reg1 immoperands1
   820                              <2>  %else
   820                              <2>  %error "unknown numop"
   820                              <2>  %endif
   820                              <2>  instruct2
   820                              <1> 
   820                              <1>  testcode
   820                              <2>  %if numop == 0
   820 00000512 90                  <2>  instruct immoperands0
   820                              <2>  %elif numop == 1
   820                              <2>  instruct reg0 immoperands1
   820                              <2>  %elif numop == 2
   820                              <2>  instruct reg0, reg1 immoperands1
   820                              <2>  %elif numop == 3
   820                              <2>  instruct reg0, reg0, reg1 immoperands1
   820                              <2>  %else
   820                              <2>  %error "unknown numop"
   820                              <2>  %endif
   820                              <2>  instruct2
   820                              <1> 
   820                              <1>  testcode
   820                              <2>  %if numop == 0
   820 00000513 90                  <2>  instruct immoperands0
   820                              <2>  %elif numop == 1
   820                              <2>  instruct reg0 immoperands1
   820                              <2>  %elif numop == 2
   820                              <2>  instruct reg0, reg1 immoperands1
   820                              <2>  %elif numop == 3
   820                              <2>  instruct reg0, reg0, reg1 immoperands1
   820                              <2>  %else
   820                              <2>  %error "unknown numop"
   820                              <2>  %endif
   820                              <2>  instruct2
   820                              <1> 
   820                              <1>  testcode
   820                              <2>  %if numop == 0
   820 00000514 90                  <2>  instruct immoperands0
   820                              <2>  %elif numop == 1
   820                              <2>  instruct reg0 immoperands1
   820                              <2>  %elif numop == 2
   820                              <2>  instruct reg0, reg1 immoperands1
   820                              <2>  %elif numop == 3
   820                              <2>  instruct reg0, reg0, reg1 immoperands1
   820                              <2>  %else
   820                              <2>  %error "unknown numop"
   820                              <2>  %endif
   820                              <2>  instruct2
   820                              <1> 
   820                              <1>  testcode
   820                              <2>  %if numop == 0
   820 00000515 90                  <2>  instruct immoperands0
   820                              <2>  %elif numop == 1
   820                              <2>  instruct reg0 immoperands1
   820                              <2>  %elif numop == 2
   820                              <2>  instruct reg0, reg1 immoperands1
   820                              <2>  %elif numop == 3
   820                              <2>  instruct reg0, reg0, reg1 immoperands1
   820                              <2>  %else
   820                              <2>  %error "unknown numop"
   820                              <2>  %endif
   820                              <2>  instruct2
   820                              <1> 
   820                              <1>  testcode
   820                              <2>  %if numop == 0
   820 00000516 90                  <2>  instruct immoperands0
   820                              <2>  %elif numop == 1
   820                              <2>  instruct reg0 immoperands1
   820                              <2>  %elif numop == 2
   820                              <2>  instruct reg0, reg1 immoperands1
   820                              <2>  %elif numop == 3
   820                              <2>  instruct reg0, reg0, reg1 immoperands1
   820                              <2>  %else
   820                              <2>  %error "unknown numop"
   820                              <2>  %endif
   820                              <2>  instruct2
   820                              <1> 
   820                              <1>  testcode
   820                              <2>  %if numop == 0
   820 00000517 90                  <2>  instruct immoperands0
   820                              <2>  %elif numop == 1
   820                              <2>  instruct reg0 immoperands1
   820                              <2>  %elif numop == 2
   820                              <2>  instruct reg0, reg1 immoperands1
   820                              <2>  %elif numop == 3
   820                              <2>  instruct reg0, reg0, reg1 immoperands1
   820                              <2>  %else
   820                              <2>  %error "unknown numop"
   820                              <2>  %endif
   820                              <2>  instruct2
   820                              <1> 
   820                              <1>  testcode
   820                              <2>  %if numop == 0
   820 00000518 90                  <2>  instruct immoperands0
   820                              <2>  %elif numop == 1
   820                              <2>  instruct reg0 immoperands1
   820                              <2>  %elif numop == 2
   820                              <2>  instruct reg0, reg1 immoperands1
   820                              <2>  %elif numop == 3
   820                              <2>  instruct reg0, reg0, reg1 immoperands1
   820                              <2>  %else
   820                              <2>  %error "unknown numop"
   820                              <2>  %endif
   820                              <2>  instruct2
   820                              <1> 
   820                              <1>  testcode
   820                              <2>  %if numop == 0
   820 00000519 90                  <2>  instruct immoperands0
   820                              <2>  %elif numop == 1
   820                              <2>  instruct reg0 immoperands1
   820                              <2>  %elif numop == 2
   820                              <2>  instruct reg0, reg1 immoperands1
   820                              <2>  %elif numop == 3
   820                              <2>  instruct reg0, reg0, reg1 immoperands1
   820                              <2>  %else
   820                              <2>  %error "unknown numop"
   820                              <2>  %endif
   820                              <2>  instruct2
   820                              <1> 
   820                              <1>  testcode
   820                              <2>  %if numop == 0
   820 0000051A 90                  <2>  instruct immoperands0
   820                              <2>  %elif numop == 1
   820                              <2>  instruct reg0 immoperands1
   820                              <2>  %elif numop == 2
   820                              <2>  instruct reg0, reg1 immoperands1
   820                              <2>  %elif numop == 3
   820                              <2>  instruct reg0, reg0, reg1 immoperands1
   820                              <2>  %else
   820                              <2>  %error "unknown numop"
   820                              <2>  %endif
   820                              <2>  instruct2
   820                              <1> 
   820                              <1>  testcode
   820                              <2>  %if numop == 0
   820 0000051B 90                  <2>  instruct immoperands0
   820                              <2>  %elif numop == 1
   820                              <2>  instruct reg0 immoperands1
   820                              <2>  %elif numop == 2
   820                              <2>  instruct reg0, reg1 immoperands1
   820                              <2>  %elif numop == 3
   820                              <2>  instruct reg0, reg0, reg1 immoperands1
   820                              <2>  %else
   820                              <2>  %error "unknown numop"
   820                              <2>  %endif
   820                              <2>  instruct2
   820                              <1> 
   820                              <1>  testcode
   820                              <2>  %if numop == 0
   820 0000051C 90                  <2>  instruct immoperands0
   820                              <2>  %elif numop == 1
   820                              <2>  instruct reg0 immoperands1
   820                              <2>  %elif numop == 2
   820                              <2>  instruct reg0, reg1 immoperands1
   820                              <2>  %elif numop == 3
   820                              <2>  instruct reg0, reg0, reg1 immoperands1
   820                              <2>  %else
   820                              <2>  %error "unknown numop"
   820                              <2>  %endif
   820                              <2>  instruct2
   820                              <1> 
   820                              <1>  testcode
   820                              <2>  %if numop == 0
   820 0000051D 90                  <2>  instruct immoperands0
   820                              <2>  %elif numop == 1
   820                              <2>  instruct reg0 immoperands1
   820                              <2>  %elif numop == 2
   820                              <2>  instruct reg0, reg1 immoperands1
   820                              <2>  %elif numop == 3
   820                              <2>  instruct reg0, reg0, reg1 immoperands1
   820                              <2>  %else
   820                              <2>  %error "unknown numop"
   820                              <2>  %endif
   820                              <2>  instruct2
   820                              <1> 
   820                              <1>  testcode
   820                              <2>  %if numop == 0
   820 0000051E 90                  <2>  instruct immoperands0
   820                              <2>  %elif numop == 1
   820                              <2>  instruct reg0 immoperands1
   820                              <2>  %elif numop == 2
   820                              <2>  instruct reg0, reg1 immoperands1
   820                              <2>  %elif numop == 3
   820                              <2>  instruct reg0, reg0, reg1 immoperands1
   820                              <2>  %else
   820                              <2>  %error "unknown numop"
   820                              <2>  %endif
   820                              <2>  instruct2
   820                              <1> 
   820                              <1>  testcode
   820                              <2>  %if numop == 0
   820 0000051F 90                  <2>  instruct immoperands0
   820                              <2>  %elif numop == 1
   820                              <2>  instruct reg0 immoperands1
   820                              <2>  %elif numop == 2
   820                              <2>  instruct reg0, reg1 immoperands1
   820                              <2>  %elif numop == 3
   820                              <2>  instruct reg0, reg0, reg1 immoperands1
   820                              <2>  %else
   820                              <2>  %error "unknown numop"
   820                              <2>  %endif
   820                              <2>  instruct2
   820                              <1> 
   820                              <1>  testcode
   820                              <2>  %if numop == 0
   820 00000520 90                  <2>  instruct immoperands0
   820                              <2>  %elif numop == 1
   820                              <2>  instruct reg0 immoperands1
   820                              <2>  %elif numop == 2
   820                              <2>  instruct reg0, reg1 immoperands1
   820                              <2>  %elif numop == 3
   820                              <2>  instruct reg0, reg0, reg1 immoperands1
   820                              <2>  %else
   820                              <2>  %error "unknown numop"
   820                              <2>  %endif
   820                              <2>  instruct2
   820                              <1> 
   820                              <1>  testcode
   820                              <2>  %if numop == 0
   820 00000521 90                  <2>  instruct immoperands0
   820                              <2>  %elif numop == 1
   820                              <2>  instruct reg0 immoperands1
   820                              <2>  %elif numop == 2
   820                              <2>  instruct reg0, reg1 immoperands1
   820                              <2>  %elif numop == 3
   820                              <2>  instruct reg0, reg0, reg1 immoperands1
   820                              <2>  %else
   820                              <2>  %error "unknown numop"
   820                              <2>  %endif
   820                              <2>  instruct2
   820                              <1> 
   820                              <1>  testcode
   820                              <2>  %if numop == 0
   820 00000522 90                  <2>  instruct immoperands0
   820                              <2>  %elif numop == 1
   820                              <2>  instruct reg0 immoperands1
   820                              <2>  %elif numop == 2
   820                              <2>  instruct reg0, reg1 immoperands1
   820                              <2>  %elif numop == 3
   820                              <2>  instruct reg0, reg0, reg1 immoperands1
   820                              <2>  %else
   820                              <2>  %error "unknown numop"
   820                              <2>  %endif
   820                              <2>  instruct2
   820                              <1> 
   820                              <1>  testcode
   820                              <2>  %if numop == 0
   820 00000523 90                  <2>  instruct immoperands0
   820                              <2>  %elif numop == 1
   820                              <2>  instruct reg0 immoperands1
   820                              <2>  %elif numop == 2
   820                              <2>  instruct reg0, reg1 immoperands1
   820                              <2>  %elif numop == 3
   820                              <2>  instruct reg0, reg0, reg1 immoperands1
   820                              <2>  %else
   820                              <2>  %error "unknown numop"
   820                              <2>  %endif
   820                              <2>  instruct2
   820                              <1> 
   820                              <1>  testcode
   820                              <2>  %if numop == 0
   820 00000524 90                  <2>  instruct immoperands0
   820                              <2>  %elif numop == 1
   820                              <2>  instruct reg0 immoperands1
   820                              <2>  %elif numop == 2
   820                              <2>  instruct reg0, reg1 immoperands1
   820                              <2>  %elif numop == 3
   820                              <2>  instruct reg0, reg0, reg1 immoperands1
   820                              <2>  %else
   820                              <2>  %error "unknown numop"
   820                              <2>  %endif
   820                              <2>  instruct2
   820                              <1> 
   820                              <1>  testcode
   820                              <2>  %if numop == 0
   820 00000525 90                  <2>  instruct immoperands0
   820                              <2>  %elif numop == 1
   820                              <2>  instruct reg0 immoperands1
   820                              <2>  %elif numop == 2
   820                              <2>  instruct reg0, reg1 immoperands1
   820                              <2>  %elif numop == 3
   820                              <2>  instruct reg0, reg0, reg1 immoperands1
   820                              <2>  %else
   820                              <2>  %error "unknown numop"
   820                              <2>  %endif
   820                              <2>  instruct2
   820                              <1> 
   820                              <1>  testcode
   820                              <2>  %if numop == 0
   820 00000526 90                  <2>  instruct immoperands0
   820                              <2>  %elif numop == 1
   820                              <2>  instruct reg0 immoperands1
   820                              <2>  %elif numop == 2
   820                              <2>  instruct reg0, reg1 immoperands1
   820                              <2>  %elif numop == 3
   820                              <2>  instruct reg0, reg0, reg1 immoperands1
   820                              <2>  %else
   820                              <2>  %error "unknown numop"
   820                              <2>  %endif
   820                              <2>  instruct2
   820                              <1> 
   820                              <1>  testcode
   820                              <2>  %if numop == 0
   820 00000527 90                  <2>  instruct immoperands0
   820                              <2>  %elif numop == 1
   820                              <2>  instruct reg0 immoperands1
   820                              <2>  %elif numop == 2
   820                              <2>  instruct reg0, reg1 immoperands1
   820                              <2>  %elif numop == 3
   820                              <2>  instruct reg0, reg0, reg1 immoperands1
   820                              <2>  %else
   820                              <2>  %error "unknown numop"
   820                              <2>  %endif
   820                              <2>  instruct2
   820                              <1> 
   820                              <1>  testcode
   820                              <2>  %if numop == 0
   820 00000528 90                  <2>  instruct immoperands0
   820                              <2>  %elif numop == 1
   820                              <2>  instruct reg0 immoperands1
   820                              <2>  %elif numop == 2
   820                              <2>  instruct reg0, reg1 immoperands1
   820                              <2>  %elif numop == 3
   820                              <2>  instruct reg0, reg0, reg1 immoperands1
   820                              <2>  %else
   820                              <2>  %error "unknown numop"
   820                              <2>  %endif
   820                              <2>  instruct2
   820                              <1> 
   820                              <1>  testcode
   820                              <2>  %if numop == 0
   820 00000529 90                  <2>  instruct immoperands0
   820                              <2>  %elif numop == 1
   820                              <2>  instruct reg0 immoperands1
   820                              <2>  %elif numop == 2
   820                              <2>  instruct reg0, reg1 immoperands1
   820                              <2>  %elif numop == 3
   820                              <2>  instruct reg0, reg0, reg1 immoperands1
   820                              <2>  %else
   820                              <2>  %error "unknown numop"
   820                              <2>  %endif
   820                              <2>  instruct2
   820                              <1> 
   820                              <1>  testcode
   820                              <2>  %if numop == 0
   820 0000052A 90                  <2>  instruct immoperands0
   820                              <2>  %elif numop == 1
   820                              <2>  instruct reg0 immoperands1
   820                              <2>  %elif numop == 2
   820                              <2>  instruct reg0, reg1 immoperands1
   820                              <2>  %elif numop == 3
   820                              <2>  instruct reg0, reg0, reg1 immoperands1
   820                              <2>  %else
   820                              <2>  %error "unknown numop"
   820                              <2>  %endif
   820                              <2>  instruct2
   820                              <1> 
   820                              <1>  testcode
   820                              <2>  %if numop == 0
   820 0000052B 90                  <2>  instruct immoperands0
   820                              <2>  %elif numop == 1
   820                              <2>  instruct reg0 immoperands1
   820                              <2>  %elif numop == 2
   820                              <2>  instruct reg0, reg1 immoperands1
   820                              <2>  %elif numop == 3
   820                              <2>  instruct reg0, reg0, reg1 immoperands1
   820                              <2>  %else
   820                              <2>  %error "unknown numop"
   820                              <2>  %endif
   820                              <2>  instruct2
   820                              <1> 
   820                              <1>  testcode
   820                              <2>  %if numop == 0
   820 0000052C 90                  <2>  instruct immoperands0
   820                              <2>  %elif numop == 1
   820                              <2>  instruct reg0 immoperands1
   820                              <2>  %elif numop == 2
   820                              <2>  instruct reg0, reg1 immoperands1
   820                              <2>  %elif numop == 3
   820                              <2>  instruct reg0, reg0, reg1 immoperands1
   820                              <2>  %else
   820                              <2>  %error "unknown numop"
   820                              <2>  %endif
   820                              <2>  instruct2
   820                              <1> 
   820                              <1>  testcode
   820                              <2>  %if numop == 0
   820 0000052D 90                  <2>  instruct immoperands0
   820                              <2>  %elif numop == 1
   820                              <2>  instruct reg0 immoperands1
   820                              <2>  %elif numop == 2
   820                              <2>  instruct reg0, reg1 immoperands1
   820                              <2>  %elif numop == 3
   820                              <2>  instruct reg0, reg0, reg1 immoperands1
   820                              <2>  %else
   820                              <2>  %error "unknown numop"
   820                              <2>  %endif
   820                              <2>  instruct2
   820                              <1> 
   820                              <1>  testcode
   820                              <2>  %if numop == 0
   820 0000052E 90                  <2>  instruct immoperands0
   820                              <2>  %elif numop == 1
   820                              <2>  instruct reg0 immoperands1
   820                              <2>  %elif numop == 2
   820                              <2>  instruct reg0, reg1 immoperands1
   820                              <2>  %elif numop == 3
   820                              <2>  instruct reg0, reg0, reg1 immoperands1
   820                              <2>  %else
   820                              <2>  %error "unknown numop"
   820                              <2>  %endif
   820                              <2>  instruct2
   820                              <1> 
   820                              <1>  testcode
   820                              <2>  %if numop == 0
   820 0000052F 90                  <2>  instruct immoperands0
   820                              <2>  %elif numop == 1
   820                              <2>  instruct reg0 immoperands1
   820                              <2>  %elif numop == 2
   820                              <2>  instruct reg0, reg1 immoperands1
   820                              <2>  %elif numop == 3
   820                              <2>  instruct reg0, reg0, reg1 immoperands1
   820                              <2>  %else
   820                              <2>  %error "unknown numop"
   820                              <2>  %endif
   820                              <2>  instruct2
   820                              <1> 
   820                              <1>  testcode
   820                              <2>  %if numop == 0
   820 00000530 90                  <2>  instruct immoperands0
   820                              <2>  %elif numop == 1
   820                              <2>  instruct reg0 immoperands1
   820                              <2>  %elif numop == 2
   820                              <2>  instruct reg0, reg1 immoperands1
   820                              <2>  %elif numop == 3
   820                              <2>  instruct reg0, reg0, reg1 immoperands1
   820                              <2>  %else
   820                              <2>  %error "unknown numop"
   820                              <2>  %endif
   820                              <2>  instruct2
   820                              <1> 
   820                              <1>  testcode
   820                              <2>  %if numop == 0
   820 00000531 90                  <2>  instruct immoperands0
   820                              <2>  %elif numop == 1
   820                              <2>  instruct reg0 immoperands1
   820                              <2>  %elif numop == 2
   820                              <2>  instruct reg0, reg1 immoperands1
   820                              <2>  %elif numop == 3
   820                              <2>  instruct reg0, reg0, reg1 immoperands1
   820                              <2>  %else
   820                              <2>  %error "unknown numop"
   820                              <2>  %endif
   820                              <2>  instruct2
   820                              <1> 
   820                              <1>  testcode
   820                              <2>  %if numop == 0
   820 00000532 90                  <2>  instruct immoperands0
   820                              <2>  %elif numop == 1
   820                              <2>  instruct reg0 immoperands1
   820                              <2>  %elif numop == 2
   820                              <2>  instruct reg0, reg1 immoperands1
   820                              <2>  %elif numop == 3
   820                              <2>  instruct reg0, reg0, reg1 immoperands1
   820                              <2>  %else
   820                              <2>  %error "unknown numop"
   820                              <2>  %endif
   820                              <2>  instruct2
   820                              <1> 
   820                              <1>  testcode
   820                              <2>  %if numop == 0
   820 00000533 90                  <2>  instruct immoperands0
   820                              <2>  %elif numop == 1
   820                              <2>  instruct reg0 immoperands1
   820                              <2>  %elif numop == 2
   820                              <2>  instruct reg0, reg1 immoperands1
   820                              <2>  %elif numop == 3
   820                              <2>  instruct reg0, reg0, reg1 immoperands1
   820                              <2>  %else
   820                              <2>  %error "unknown numop"
   820                              <2>  %endif
   820                              <2>  instruct2
   820                              <1> 
   820                              <1>  testcode
   820                              <2>  %if numop == 0
   820 00000534 90                  <2>  instruct immoperands0
   820                              <2>  %elif numop == 1
   820                              <2>  instruct reg0 immoperands1
   820                              <2>  %elif numop == 2
   820                              <2>  instruct reg0, reg1 immoperands1
   820                              <2>  %elif numop == 3
   820                              <2>  instruct reg0, reg0, reg1 immoperands1
   820                              <2>  %else
   820                              <2>  %error "unknown numop"
   820                              <2>  %endif
   820                              <2>  instruct2
   820                              <1> 
   820                              <1>  testcode
   820                              <2>  %if numop == 0
   820 00000535 90                  <2>  instruct immoperands0
   820                              <2>  %elif numop == 1
   820                              <2>  instruct reg0 immoperands1
   820                              <2>  %elif numop == 2
   820                              <2>  instruct reg0, reg1 immoperands1
   820                              <2>  %elif numop == 3
   820                              <2>  instruct reg0, reg0, reg1 immoperands1
   820                              <2>  %else
   820                              <2>  %error "unknown numop"
   820                              <2>  %endif
   820                              <2>  instruct2
   820                              <1> 
   820                              <1>  testcode
   820                              <2>  %if numop == 0
   820 00000536 90                  <2>  instruct immoperands0
   820                              <2>  %elif numop == 1
   820                              <2>  instruct reg0 immoperands1
   820                              <2>  %elif numop == 2
   820                              <2>  instruct reg0, reg1 immoperands1
   820                              <2>  %elif numop == 3
   820                              <2>  instruct reg0, reg0, reg1 immoperands1
   820                              <2>  %else
   820                              <2>  %error "unknown numop"
   820                              <2>  %endif
   820                              <2>  instruct2
   820                              <1> 
   820                              <1>  testcode
   820                              <2>  %if numop == 0
   820 00000537 90                  <2>  instruct immoperands0
   820                              <2>  %elif numop == 1
   820                              <2>  instruct reg0 immoperands1
   820                              <2>  %elif numop == 2
   820                              <2>  instruct reg0, reg1 immoperands1
   820                              <2>  %elif numop == 3
   820                              <2>  instruct reg0, reg0, reg1 immoperands1
   820                              <2>  %else
   820                              <2>  %error "unknown numop"
   820                              <2>  %endif
   820                              <2>  instruct2
   820                              <1> 
   820                              <1>  testcode
   820                              <2>  %if numop == 0
   820 00000538 90                  <2>  instruct immoperands0
   820                              <2>  %elif numop == 1
   820                              <2>  instruct reg0 immoperands1
   820                              <2>  %elif numop == 2
   820                              <2>  instruct reg0, reg1 immoperands1
   820                              <2>  %elif numop == 3
   820                              <2>  instruct reg0, reg0, reg1 immoperands1
   820                              <2>  %else
   820                              <2>  %error "unknown numop"
   820                              <2>  %endif
   820                              <2>  instruct2
   820                              <1> 
   820                              <1>  testcode
   820                              <2>  %if numop == 0
   820 00000539 90                  <2>  instruct immoperands0
   820                              <2>  %elif numop == 1
   820                              <2>  instruct reg0 immoperands1
   820                              <2>  %elif numop == 2
   820                              <2>  instruct reg0, reg1 immoperands1
   820                              <2>  %elif numop == 3
   820                              <2>  instruct reg0, reg0, reg1 immoperands1
   820                              <2>  %else
   820                              <2>  %error "unknown numop"
   820                              <2>  %endif
   820                              <2>  instruct2
   820                              <1> 
   820                              <1>  testcode
   820                              <2>  %if numop == 0
   820 0000053A 90                  <2>  instruct immoperands0
   820                              <2>  %elif numop == 1
   820                              <2>  instruct reg0 immoperands1
   820                              <2>  %elif numop == 2
   820                              <2>  instruct reg0, reg1 immoperands1
   820                              <2>  %elif numop == 3
   820                              <2>  instruct reg0, reg0, reg1 immoperands1
   820                              <2>  %else
   820                              <2>  %error "unknown numop"
   820                              <2>  %endif
   820                              <2>  instruct2
   820                              <1> 
   820                              <1>  testcode
   820                              <2>  %if numop == 0
   820 0000053B 90                  <2>  instruct immoperands0
   820                              <2>  %elif numop == 1
   820                              <2>  instruct reg0 immoperands1
   820                              <2>  %elif numop == 2
   820                              <2>  instruct reg0, reg1 immoperands1
   820                              <2>  %elif numop == 3
   820                              <2>  instruct reg0, reg0, reg1 immoperands1
   820                              <2>  %else
   820                              <2>  %error "unknown numop"
   820                              <2>  %endif
   820                              <2>  instruct2
   820                              <1> 
   820                              <1>  testcode
   820                              <2>  %if numop == 0
   820 0000053C 90                  <2>  instruct immoperands0
   820                              <2>  %elif numop == 1
   820                              <2>  instruct reg0 immoperands1
   820                              <2>  %elif numop == 2
   820                              <2>  instruct reg0, reg1 immoperands1
   820                              <2>  %elif numop == 3
   820                              <2>  instruct reg0, reg0, reg1 immoperands1
   820                              <2>  %else
   820                              <2>  %error "unknown numop"
   820                              <2>  %endif
   820                              <2>  instruct2
   820                              <1> 
   820                              <1>  testcode
   820                              <2>  %if numop == 0
   820 0000053D 90                  <2>  instruct immoperands0
   820                              <2>  %elif numop == 1
   820                              <2>  instruct reg0 immoperands1
   820                              <2>  %elif numop == 2
   820                              <2>  instruct reg0, reg1 immoperands1
   820                              <2>  %elif numop == 3
   820                              <2>  instruct reg0, reg0, reg1 immoperands1
   820                              <2>  %else
   820                              <2>  %error "unknown numop"
   820                              <2>  %endif
   820                              <2>  instruct2
   820                              <1> 
   820                              <1>  testcode
   820                              <2>  %if numop == 0
   820 0000053E 90                  <2>  instruct immoperands0
   820                              <2>  %elif numop == 1
   820                              <2>  instruct reg0 immoperands1
   820                              <2>  %elif numop == 2
   820                              <2>  instruct reg0, reg1 immoperands1
   820                              <2>  %elif numop == 3
   820                              <2>  instruct reg0, reg0, reg1 immoperands1
   820                              <2>  %else
   820                              <2>  %error "unknown numop"
   820                              <2>  %endif
   820                              <2>  instruct2
   820                              <1> 
   820                              <1>  testcode
   820                              <2>  %if numop == 0
   820 0000053F 90                  <2>  instruct immoperands0
   820                              <2>  %elif numop == 1
   820                              <2>  instruct reg0 immoperands1
   820                              <2>  %elif numop == 2
   820                              <2>  instruct reg0, reg1 immoperands1
   820                              <2>  %elif numop == 3
   820                              <2>  instruct reg0, reg0, reg1 immoperands1
   820                              <2>  %else
   820                              <2>  %error "unknown numop"
   820                              <2>  %endif
   820                              <2>  instruct2
   820                              <1> 
   820                              <1>  testcode
   820                              <2>  %if numop == 0
   820 00000540 90                  <2>  instruct immoperands0
   820                              <2>  %elif numop == 1
   820                              <2>  instruct reg0 immoperands1
   820                              <2>  %elif numop == 2
   820                              <2>  instruct reg0, reg1 immoperands1
   820                              <2>  %elif numop == 3
   820                              <2>  instruct reg0, reg0, reg1 immoperands1
   820                              <2>  %else
   820                              <2>  %error "unknown numop"
   820                              <2>  %endif
   820                              <2>  instruct2
   820                              <1> 
   820                              <1>  testcode
   820                              <2>  %if numop == 0
   820 00000541 90                  <2>  instruct immoperands0
   820                              <2>  %elif numop == 1
   820                              <2>  instruct reg0 immoperands1
   820                              <2>  %elif numop == 2
   820                              <2>  instruct reg0, reg1 immoperands1
   820                              <2>  %elif numop == 3
   820                              <2>  instruct reg0, reg0, reg1 immoperands1
   820                              <2>  %else
   820                              <2>  %error "unknown numop"
   820                              <2>  %endif
   820                              <2>  instruct2
   820                              <1> 
   820                              <1>  testcode
   820                              <2>  %if numop == 0
   820 00000542 90                  <2>  instruct immoperands0
   820                              <2>  %elif numop == 1
   820                              <2>  instruct reg0 immoperands1
   820                              <2>  %elif numop == 2
   820                              <2>  instruct reg0, reg1 immoperands1
   820                              <2>  %elif numop == 3
   820                              <2>  instruct reg0, reg0, reg1 immoperands1
   820                              <2>  %else
   820                              <2>  %error "unknown numop"
   820                              <2>  %endif
   820                              <2>  instruct2
   820                              <1> 
   820                              <1>  testcode
   820                              <2>  %if numop == 0
   820 00000543 90                  <2>  instruct immoperands0
   820                              <2>  %elif numop == 1
   820                              <2>  instruct reg0 immoperands1
   820                              <2>  %elif numop == 2
   820                              <2>  instruct reg0, reg1 immoperands1
   820                              <2>  %elif numop == 3
   820                              <2>  instruct reg0, reg0, reg1 immoperands1
   820                              <2>  %else
   820                              <2>  %error "unknown numop"
   820                              <2>  %endif
   820                              <2>  instruct2
   820                              <1> 
   820                              <1>  testcode
   820                              <2>  %if numop == 0
   820 00000544 90                  <2>  instruct immoperands0
   820                              <2>  %elif numop == 1
   820                              <2>  instruct reg0 immoperands1
   820                              <2>  %elif numop == 2
   820                              <2>  instruct reg0, reg1 immoperands1
   820                              <2>  %elif numop == 3
   820                              <2>  instruct reg0, reg0, reg1 immoperands1
   820                              <2>  %else
   820                              <2>  %error "unknown numop"
   820                              <2>  %endif
   820                              <2>  instruct2
   820                              <1> 
   820                              <1>  testcode
   820                              <2>  %if numop == 0
   820 00000545 90                  <2>  instruct immoperands0
   820                              <2>  %elif numop == 1
   820                              <2>  instruct reg0 immoperands1
   820                              <2>  %elif numop == 2
   820                              <2>  instruct reg0, reg1 immoperands1
   820                              <2>  %elif numop == 3
   820                              <2>  instruct reg0, reg0, reg1 immoperands1
   820                              <2>  %else
   820                              <2>  %error "unknown numop"
   820                              <2>  %endif
   820                              <2>  instruct2
   820                              <1> 
   820                              <1>  testcode
   820                              <2>  %if numop == 0
   820 00000546 90                  <2>  instruct immoperands0
   820                              <2>  %elif numop == 1
   820                              <2>  instruct reg0 immoperands1
   820                              <2>  %elif numop == 2
   820                              <2>  instruct reg0, reg1 immoperands1
   820                              <2>  %elif numop == 3
   820                              <2>  instruct reg0, reg0, reg1 immoperands1
   820                              <2>  %else
   820                              <2>  %error "unknown numop"
   820                              <2>  %endif
   820                              <2>  instruct2
   820                              <1> 
   820                              <1>  testcode
   820                              <2>  %if numop == 0
   820 00000547 90                  <2>  instruct immoperands0
   820                              <2>  %elif numop == 1
   820                              <2>  instruct reg0 immoperands1
   820                              <2>  %elif numop == 2
   820                              <2>  instruct reg0, reg1 immoperands1
   820                              <2>  %elif numop == 3
   820                              <2>  instruct reg0, reg0, reg1 immoperands1
   820                              <2>  %else
   820                              <2>  %error "unknown numop"
   820                              <2>  %endif
   820                              <2>  instruct2
   820                              <1> 
   820                              <1>  testcode
   820                              <2>  %if numop == 0
   820 00000548 90                  <2>  instruct immoperands0
   820                              <2>  %elif numop == 1
   820                              <2>  instruct reg0 immoperands1
   820                              <2>  %elif numop == 2
   820                              <2>  instruct reg0, reg1 immoperands1
   820                              <2>  %elif numop == 3
   820                              <2>  instruct reg0, reg0, reg1 immoperands1
   820                              <2>  %else
   820                              <2>  %error "unknown numop"
   820                              <2>  %endif
   820                              <2>  instruct2
   820                              <1> 
   820                              <1>  testcode
   820                              <2>  %if numop == 0
   820 00000549 90                  <2>  instruct immoperands0
   820                              <2>  %elif numop == 1
   820                              <2>  instruct reg0 immoperands1
   820                              <2>  %elif numop == 2
   820                              <2>  instruct reg0, reg1 immoperands1
   820                              <2>  %elif numop == 3
   820                              <2>  instruct reg0, reg0, reg1 immoperands1
   820                              <2>  %else
   820                              <2>  %error "unknown numop"
   820                              <2>  %endif
   820                              <2>  instruct2
   820                              <1> 
   820                              <1>  testcode
   820                              <2>  %if numop == 0
   820 0000054A 90                  <2>  instruct immoperands0
   820                              <2>  %elif numop == 1
   820                              <2>  instruct reg0 immoperands1
   820                              <2>  %elif numop == 2
   820                              <2>  instruct reg0, reg1 immoperands1
   820                              <2>  %elif numop == 3
   820                              <2>  instruct reg0, reg0, reg1 immoperands1
   820                              <2>  %else
   820                              <2>  %error "unknown numop"
   820                              <2>  %endif
   820                              <2>  instruct2
   820                              <1> 
   820                              <1>  testcode
   820                              <2>  %if numop == 0
   820 0000054B 90                  <2>  instruct immoperands0
   820                              <2>  %elif numop == 1
   820                              <2>  instruct reg0 immoperands1
   820                              <2>  %elif numop == 2
   820                              <2>  instruct reg0, reg1 immoperands1
   820                              <2>  %elif numop == 3
   820                              <2>  instruct reg0, reg0, reg1 immoperands1
   820                              <2>  %else
   820                              <2>  %error "unknown numop"
   820                              <2>  %endif
   820                              <2>  instruct2
   820                              <1> 
   820                              <1>  testcode
   820                              <2>  %if numop == 0
   820 0000054C 90                  <2>  instruct immoperands0
   820                              <2>  %elif numop == 1
   820                              <2>  instruct reg0 immoperands1
   820                              <2>  %elif numop == 2
   820                              <2>  instruct reg0, reg1 immoperands1
   820                              <2>  %elif numop == 3
   820                              <2>  instruct reg0, reg0, reg1 immoperands1
   820                              <2>  %else
   820                              <2>  %error "unknown numop"
   820                              <2>  %endif
   820                              <2>  instruct2
   820                              <1> 
   820                              <1>  testcode
   820                              <2>  %if numop == 0
   820 0000054D 90                  <2>  instruct immoperands0
   820                              <2>  %elif numop == 1
   820                              <2>  instruct reg0 immoperands1
   820                              <2>  %elif numop == 2
   820                              <2>  instruct reg0, reg1 immoperands1
   820                              <2>  %elif numop == 3
   820                              <2>  instruct reg0, reg0, reg1 immoperands1
   820                              <2>  %else
   820                              <2>  %error "unknown numop"
   820                              <2>  %endif
   820                              <2>  instruct2
   820                              <1> 
   820                              <1>  testcode
   820                              <2>  %if numop == 0
   820 0000054E 90                  <2>  instruct immoperands0
   820                              <2>  %elif numop == 1
   820                              <2>  instruct reg0 immoperands1
   820                              <2>  %elif numop == 2
   820                              <2>  instruct reg0, reg1 immoperands1
   820                              <2>  %elif numop == 3
   820                              <2>  instruct reg0, reg0, reg1 immoperands1
   820                              <2>  %else
   820                              <2>  %error "unknown numop"
   820                              <2>  %endif
   820                              <2>  instruct2
   820                              <1> 
   820                              <1>  testcode
   820                              <2>  %if numop == 0
   820 0000054F 90                  <2>  instruct immoperands0
   820                              <2>  %elif numop == 1
   820                              <2>  instruct reg0 immoperands1
   820                              <2>  %elif numop == 2
   820                              <2>  instruct reg0, reg1 immoperands1
   820                              <2>  %elif numop == 3
   820                              <2>  instruct reg0, reg0, reg1 immoperands1
   820                              <2>  %else
   820                              <2>  %error "unknown numop"
   820                              <2>  %endif
   820                              <2>  instruct2
   820                              <1> 
   820                              <1>  testcode
   820                              <2>  %if numop == 0
   820 00000550 90                  <2>  instruct immoperands0
   820                              <2>  %elif numop == 1
   820                              <2>  instruct reg0 immoperands1
   820                              <2>  %elif numop == 2
   820                              <2>  instruct reg0, reg1 immoperands1
   820                              <2>  %elif numop == 3
   820                              <2>  instruct reg0, reg0, reg1 immoperands1
   820                              <2>  %else
   820                              <2>  %error "unknown numop"
   820                              <2>  %endif
   820                              <2>  instruct2
   820                              <1> 
   820                              <1>  testcode
   820                              <2>  %if numop == 0
   820 00000551 90                  <2>  instruct immoperands0
   820                              <2>  %elif numop == 1
   820                              <2>  instruct reg0 immoperands1
   820                              <2>  %elif numop == 2
   820                              <2>  instruct reg0, reg1 immoperands1
   820                              <2>  %elif numop == 3
   820                              <2>  instruct reg0, reg0, reg1 immoperands1
   820                              <2>  %else
   820                              <2>  %error "unknown numop"
   820                              <2>  %endif
   820                              <2>  instruct2
   821                                  
   822                                  %ifmacro testafter1
   823                                          testafter1
   824                                  %endif
   825                                  
   826                                  %if REPETITIONS1 > 1
   827                                          dec r12d
   828                                          jnz REPETITIONS1LOOP
   829                                  %endif
   830                                  
   831                                  %ifmacro testafter2
   832                                          testafter2
   833                                  %endif
   834                                  
   835                                  ;##############################################################################
   836                                  ;#
   837                                  ;#                 Test code end
   838                                  ;#
   839                                  ;##############################################################################
   840                                  
   841                                          SERIALIZE
   841 00000552 31C0                <1>  xor eax, eax
   841 00000554 0FA2                <1>  cpuid
   842                                  
   843                                          ; subtract counts before from counts after
   844 00000556 418B4500                        mov     eax, [r13 + (CountTemp-ThreadData)]            ; -count
   845 0000055A F7D8                            neg     eax
   846                                  %if     SUBTRACT_OVERHEAD
   847 0000055C 412B4524                        sub     eax, [r13+(CountOverhead-ThreadData)]   ; overhead clock count        
   848                                  %endif  ; SUBTRACT_OVERHEAD        
   849 00000560 438944B548                      mov     [r13+r14*4+(ClockResults-ThreadData)], eax      ; save clock count
   850                                          
   851                                  %assign i  0
   852                                  %rep    NUM_COUNTERS
   853                                          mov     eax, [r13 + i*4 + 4 + (CountTemp-ThreadData)]
   854                                          neg     eax
   855                                  %if     SUBTRACT_OVERHEAD
   856                                          sub     eax, [r13+i*4+4+(CountOverhead-ThreadData)]   ; overhead pmc count        
   857                                  %endif  ; SUBTRACT_OVERHEAD        
   858                                          mov     [r13+r14*4+i*4*REPETITIONS0+(PMCResults-ThreadData)], eax      ; save count        
   859                                  %assign i  i+1
   860                                  %endrep
   860 00000565 418B4504            <1>  mov eax, [r13 + i*4 + 4 + (CountTemp-ThreadData)]
   860 00000569 F7D8                <1>  neg eax
   860                              <1> %if SUBTRACT_OVERHEAD
   860 0000056B 412B4528            <1>  sub eax, [r13+i*4+4+(CountOverhead-ThreadData)]
   860                              <1> %endif
   860 0000056F 438944B568          <1>  mov [r13+r14*4+i*4*REPETITIONS0+(PMCResults-ThreadData)], eax
   860                              <1> %assign i i+1
   860 00000574 418B4508            <1>  mov eax, [r13 + i*4 + 4 + (CountTemp-ThreadData)]
   860 00000578 F7D8                <1>  neg eax
   860                              <1> %if SUBTRACT_OVERHEAD
   860 0000057A 412B452C            <1>  sub eax, [r13+i*4+4+(CountOverhead-ThreadData)]
   860                              <1> %endif
   860 0000057E 438984B588000000    <1>  mov [r13+r14*4+i*4*REPETITIONS0+(PMCResults-ThreadData)], eax
   860                              <1> %assign i i+1
   860 00000586 418B450C            <1>  mov eax, [r13 + i*4 + 4 + (CountTemp-ThreadData)]
   860 0000058A F7D8                <1>  neg eax
   860                              <1> %if SUBTRACT_OVERHEAD
   860 0000058C 412B4530            <1>  sub eax, [r13+i*4+4+(CountOverhead-ThreadData)]
   860                              <1> %endif
   860 00000590 438984B5A8000000    <1>  mov [r13+r14*4+i*4*REPETITIONS0+(PMCResults-ThreadData)], eax
   860                              <1> %assign i i+1
   860 00000598 418B4510            <1>  mov eax, [r13 + i*4 + 4 + (CountTemp-ThreadData)]
   860 0000059C F7D8                <1>  neg eax
   860                              <1> %if SUBTRACT_OVERHEAD
   860 0000059E 412B4534            <1>  sub eax, [r13+i*4+4+(CountOverhead-ThreadData)]
   860                              <1> %endif
   860 000005A2 438984B5C8000000    <1>  mov [r13+r14*4+i*4*REPETITIONS0+(PMCResults-ThreadData)], eax
   860                              <1> %assign i i+1
   860 000005AA 418B4514            <1>  mov eax, [r13 + i*4 + 4 + (CountTemp-ThreadData)]
   860 000005AE F7D8                <1>  neg eax
   860                              <1> %if SUBTRACT_OVERHEAD
   860 000005B0 412B4538            <1>  sub eax, [r13+i*4+4+(CountOverhead-ThreadData)]
   860                              <1> %endif
   860 000005B4 438984B5E8000000    <1>  mov [r13+r14*4+i*4*REPETITIONS0+(PMCResults-ThreadData)], eax
   860                              <1> %assign i i+1
   860 000005BC 418B4518            <1>  mov eax, [r13 + i*4 + 4 + (CountTemp-ThreadData)]
   860 000005C0 F7D8                <1>  neg eax
   860                              <1> %if SUBTRACT_OVERHEAD
   860 000005C2 412B453C            <1>  sub eax, [r13+i*4+4+(CountOverhead-ThreadData)]
   860                              <1> %endif
   860 000005C6 438984B508010000    <1>  mov [r13+r14*4+i*4*REPETITIONS0+(PMCResults-ThreadData)], eax
   860                              <1> %assign i i+1
   860 000005CE 418B451C            <1>  mov eax, [r13 + i*4 + 4 + (CountTemp-ThreadData)]
   860 000005D2 F7D8                <1>  neg eax
   860                              <1> %if SUBTRACT_OVERHEAD
   860 000005D4 412B4540            <1>  sub eax, [r13+i*4+4+(CountOverhead-ThreadData)]
   860                              <1> %endif
   860 000005D8 438984B528010000    <1>  mov [r13+r14*4+i*4*REPETITIONS0+(PMCResults-ThreadData)], eax
   860                              <1> %assign i i+1
   860 000005E0 418B4520            <1>  mov eax, [r13 + i*4 + 4 + (CountTemp-ThreadData)]
   860 000005E4 F7D8                <1>  neg eax
   860                              <1> %if SUBTRACT_OVERHEAD
   860 000005E6 412B4544            <1>  sub eax, [r13+i*4+4+(CountOverhead-ThreadData)]
   860                              <1> %endif
   860 000005EA 438984B548010000    <1>  mov [r13+r14*4+i*4*REPETITIONS0+(PMCResults-ThreadData)], eax
   860                              <1> %assign i i+1
   861                                          
   862                                          ; end second test loop
   863 000005F2 41FFC6                          inc     r14d
   864 000005F5 4183FE08                        cmp     r14d, REPETITIONS0
   865 000005F9 0F821DFCFFFF                    jb      TEST_LOOP_2
   866                                  
   867                                          ; clean up
   868                                  EXITALL1:
   869                                  
   870                                  %ifmacro testafter3
   871                                          testafter3
   872                                  %endif
   873                                  
   874 000005FF 498BA568010000                  mov     rsp, [r13+(RSPSave-ThreadData)]   ; restore stack pointer        
   875 00000606 9BDBE3                          finit
   876 00000609 FC                              cld
   877                                  %if  USEAVX
   878 0000060A C5FC77                          VZEROALL                       ; clear all ymm registers
   879                                  %endif
   880                                  
   881                                  EXITALL2:
   882                                          ; return REPETITIONS0;
   883 0000060D B808000000                      mov     eax, REPETITIONS0
   884                                          
   885                                  %if     WINDOWS                        ; Restore registers saved in Windows
   886                                          movaps  xmm6, [rsp]
   887                                          movaps  xmm7, [rsp+10H]
   888                                          movaps  xmm8, [rsp+20H]
   889                                          movaps  xmm9, [rsp+30H]
   890                                          movaps  xmm10, [rsp+40H]
   891                                          movaps  xmm11, [rsp+50H]
   892                                          movaps  xmm12, [rsp+60H]
   893                                          movaps  xmm13, [rsp+70H]
   894                                          movaps  xmm14, [rsp+80H]
   895                                          movaps  xmm15, [rsp+90H]
   896                                          add     rsp, 0A8H           ; Free space for saving xmm6 - 15
   897                                          pop     rdi
   898                                          pop     rsi
   899                                  %endif
   900 00000612 415F                            pop     r15
   901 00000614 415E                            pop     r14
   902 00000616 415D                            pop     r13
   903 00000618 415C                            pop     r12
   904 0000061A 5D                              pop     rbp
   905 0000061B 5B                              pop     rbx
   906 0000061C C3                              ret
   907                                          
   908                                  ; End of TestLoop
